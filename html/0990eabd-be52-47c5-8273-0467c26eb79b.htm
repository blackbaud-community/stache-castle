<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>SpecFlow's Table and TableRow Guidelines</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="0990eabd-be52-47c5-8273-0467c26eb79b" /><meta name="Description" content="In this walkthrough you will get experience with handling SpecFlow's Table and TableRow objects with the UAT SDK (Project Blue) API." /><meta name="Microsoft.Help.ContentType" content="How To" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Blue<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="f52e699b-de1d-4242-bd0a-ab85261f9c93.htm" title="Blue" tocid="roottoc">Blue</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="d48ef890-924b-44ec-8ce1-856896c0abec.htm" title="Delving Deeper" tocid="d48ef890-924b-44ec-8ce1-856896c0abec">Delving Deeper</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="aa9d7059-e8f6-4e72-a741-a9fa2e5411f0.htm" title="Using the Selenium WebDriver" tocid="aa9d7059-e8f6-4e72-a741-a9fa2e5411f0">Using the Selenium WebDriver</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8f3ad4c4-e6cf-4411-8d1a-7ca773037e33.htm" title="XPath Guidelines" tocid="8f3ad4c4-e6cf-4411-8d1a-7ca773037e33">XPath Guidelines</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="0990eabd-be52-47c5-8273-0467c26eb79b.htm" title="SpecFlow's Table and TableRow Guidelines" tocid="0990eabd-be52-47c5-8273-0467c26eb79b">SpecFlow's Table and TableRow Guidelines</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="4d721943-df97-4c91-aed1-7aeea9372876.htm" title="Setting Custom Fields" tocid="4d721943-df97-4c91-aed1-7aeea9372876">Setting Custom Fields</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize"><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize"></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/blueshirt_ico.png" /></td><td class="titleColumn">SpecFlow's Table and TableRow Guidelines</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
        In this walkthrough you will get experience with handling SpecFlow's Table and TableRow objects with the UAT SDK (Project Blue) API.
      </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Prerequisites</span></div><div id="ID0RBSection" class="collapsibleSection"><ul><li><p>You have completed the "Using the Selenium WebDriver" walkthrough and have access to an Enterprise CRM application.</p></li><li><p>You are comfortable adding tests and step implementations to existing feature and step files.</p></li><li><p>You are comfortable accessing the existing UAT SDK (Project Blue) Core API.</p></li><li><p>You are comfortable modifying the app.config to change which application the tests run against.</p></li><li><p>
              You are comfortable identifying the unique attribute values for the XPath constructors in the Core API
              and have completed the "XPath Guidelines" walkthrough.
            </p></li></ul></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />From Feature File to Step File - The Old Approach To Tables</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="mediaNear"><div class="caption">
            SpecFlow feature files support Tables for passing in variables to the .NET step methods.  Here is a test 
            example for adding an address to a constituent
          </div><img alt="Old Table Feature" src="../media/OldTableFeature.PNG" /></div><div class="mediaNear"><div class="caption">
            At some point the test attempts to set the fields on the 'Add an address' dialog.
          </div><img alt="Add Address Dialog" src="../media/AddAddressDialog.PNG" /></div><p>
          Specflow creates bindings between the test cases and the step methods.  The field variables for
          the address dialog are passed through the Table parameter.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EALADAAA_tab1" class="codeSnippetContainerTabSingle">Step method with a Table parameter.</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EALADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EALADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EALADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> Blueshirt.Core.Base;
<span class="highlight-keyword">using</span> Blueshirt.Core.Crm;
<span class="highlight-keyword">using</span> TechTalk.SpecFlow;

<span class="highlight-keyword">namespace</span> Delving_Deeper
{
    [Binding]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> SampleTestsSteps : BaseSteps
    {
        [Given(<span class="highlight-literal">@"I have logged into BBCRM"</span>)]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> GivenIHaveLoggedIntoBBCRM()
        {
            BBCRMHomePage.Logon();
        }

        [Given(<span class="highlight-literal">@"a constituent exists with last name "</span><span class="highlight-literal">"(.*)"</span><span class="highlight-literal">""</span>)]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> GivenAConstituentExistsWithLastName(<span class="highlight-keyword">string</span> p0)
        {
            ScenarioContext.Current.Pending();
        }

        [When(<span class="highlight-literal">@"I add an address to the current constituent"</span>)]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> WhenIAddAnAddressToTheCurrentConstituent(Table table)
        {
            ScenarioContext.Current.Pending();
        }

        [Then(<span class="highlight-literal">@"an address exists"</span>)]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> ThenAnAddressExists(Table table)
        {
            ScenarioContext.Current.Pending();
        }

    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EALADAAA");</script><p>
          Here is an implementation of the step methods.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAJADAAA_tab1" class="codeSnippetContainerTabSingle">Implemented steps</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAJADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAJADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAJADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[Given(<span class="highlight-literal">@"I have logged into BBCRM"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> GivenIHaveLoggedIntoBBCRM()
{
    BBCRMHomePage.Logon();
}

[Given(<span class="highlight-literal">@"a constituent exists with last name "</span><span class="highlight-literal">"(.*)"</span><span class="highlight-literal">""</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> GivenAConstituentExistsWithLastName(<span class="highlight-keyword">string</span> constituent)
{
    constituent += uniqueStamp;
    BBCRMHomePage.OpenConstituentsFA();
    ConstituentsFunctionalArea.AddAnIndividual();
    IndividualDialog.SetLastName(constituent);
    IndividualDialog.Save();
}

[When(<span class="highlight-literal">@"I add an address to the current constituent"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> WhenIAddAnAddressToTheCurrentConstituent(Table addressFields)
{
    ConstituentPanel.SelectTab(<span class="highlight-literal">"Contact"</span>);
    ConstituentPanel.ClickSectionAddButton(<span class="highlight-literal">"Addresses"</span>);
    AddressDialog.SetAddressFields(addressFields);
    Dialog.Save();
}

[Then(<span class="highlight-literal">@"an address exists"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> ThenAnAddressExists(Table addressFields)
{
    IDictionary&lt;<span class="highlight-keyword">string</span>, <span class="highlight-keyword">string</span>&gt; addressRow = <span class="highlight-keyword">new</span> Dictionary&lt;<span class="highlight-keyword">string</span>, <span class="highlight-keyword">string</span>&gt;();
    <span class="highlight-keyword">foreach</span> (TableRow row <span class="highlight-keyword">in</span> addressFields.Rows)
    {
        addressRow.Add(row[<span class="highlight-literal">"Field"</span>], row[<span class="highlight-literal">"Value"</span>]);
    }
    ConstituentPanel.SelectTab(<span class="highlight-literal">"Contact"</span>);
    <span class="highlight-keyword">if</span> (!ConstituentPanel.SectionDatalistRowExists(addressRow, <span class="highlight-literal">"Addresses"</span>)) 
        FailTest(String.Format(<span class="highlight-literal">"Address '{0}' not found."</span>, addressRow.Values));
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAJADAAA");</script><p>
          AddressDialog is not a class in the UAT SDK (Project Blue). At this point your build should be failing. Let's create an AddressDialog class and implement the SetAddressFields() method.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAHADAAA_tab1" class="codeSnippetContainerTabSingle">AddressDialog Class with empty method.</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAHADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAHADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAHADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> Blueshirt.Core.Crm;
<span class="highlight-keyword">using</span> TechTalk.SpecFlow;

<span class="highlight-keyword">namespace</span> Delving_Deeper
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AddressDialog : Dialog
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SetAddressFields(Table addressFields)
        {
            <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> NotImplementedException();
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAHADAAA");</script><p>
          First we ensure that we are on the 'Address' tab.  Then we parse through every row in the Table.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAFADAAA_tab1" class="codeSnippetContainerTabSingle">For each TableRow in Table</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAFADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAFADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAFADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> Blueshirt.Core.Crm;
<span class="highlight-keyword">using</span> TechTalk.SpecFlow;

<span class="highlight-keyword">namespace</span> Delving_Deeper
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AddressDialog : Dialog
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SetAddressFields(Table addressFields)
        {
            OpenTab(<span class="highlight-literal">"Address"</span>);
            <span class="highlight-keyword">foreach</span> (TableRow row <span class="highlight-keyword">in</span> addressFields.Rows)
            {

            }
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAFADAAA");</script><p>
          Each iteration through the loop gives us a new row from the Table. We need to use the TableRow object to find a field with an XPath selector and set the field's value. How we construct the XPath, what variables we pass to the XPath constructor, and what type of field setter we use are all determined by the specific field represented as the TableRow object. This logic must be defined for each possible value of row["Field"].
        </p><p>
          To handle this, we create a switch on the caption value. The caption dictates what type of field we want to set and how to set its value.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EACADAAA_tab1" class="codeSnippetContainerTabSingle">Implemented AddressDialog</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EACADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EACADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> Blueshirt.Core.Crm;
<span class="highlight-keyword">using</span> TechTalk.SpecFlow;

<span class="highlight-keyword">namespace</span> Delving_Deeper
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AddressDialog : Dialog
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SetAddressFields(Table addressFields)
        {
            OpenTab(<span class="highlight-literal">"Address"</span>);
            <span class="highlight-keyword">foreach</span> (TableRow row <span class="highlight-keyword">in</span> addressFields.Rows)
            {
                <span class="highlight-keyword">string</span> caption = row[<span class="highlight-literal">"Field"</span>];
                <span class="highlight-keyword">string</span> <span class="highlight-keyword">value</span> = row[<span class="highlight-literal">"Value"</span>];
                <span class="highlight-keyword">switch</span> (caption)
                {
                    <span class="highlight-keyword">case</span> <span class="highlight-literal">"Type"</span>:
                        SetDropDown(getXInput(<span class="highlight-literal">"AddressAddForm2"</span>, <span class="highlight-literal">"_ADDRESSTYPECODEID_value"</span>), <span class="highlight-keyword">value</span>);
                        <span class="highlight-keyword">break</span>;
                    <span class="highlight-keyword">case</span> <span class="highlight-literal">"Country"</span>:
                        SetDropDown(getXInput(<span class="highlight-literal">"AddressAddForm2"</span>, <span class="highlight-literal">"_COUNTRYID_value"</span>), <span class="highlight-keyword">value</span>);
                        <span class="highlight-keyword">break</span>;
                    <span class="highlight-keyword">case</span> <span class="highlight-literal">"Address"</span>:
                        SetTextField(getXTextArea(<span class="highlight-literal">"AddressAddForm2"</span>, <span class="highlight-literal">"_ADDRESSBLOCK_value"</span>), <span class="highlight-keyword">value</span>);
                        <span class="highlight-keyword">break</span>;
                    <span class="highlight-keyword">case</span> <span class="highlight-literal">"City"</span>:
                        SetTextField(getXInput(<span class="highlight-literal">"AddressAddForm2"</span>, <span class="highlight-literal">"_CITY_value"</span>), <span class="highlight-keyword">value</span>);
                        <span class="highlight-keyword">break</span>;
                    <span class="highlight-keyword">case</span> <span class="highlight-literal">"State"</span>:
                        SetDropDown(getXInput(<span class="highlight-literal">"AddressAddForm2"</span>, <span class="highlight-literal">"_STATEID_value"</span>), <span class="highlight-keyword">value</span>);
                        <span class="highlight-keyword">break</span>;
                    <span class="highlight-keyword">case</span> <span class="highlight-literal">"ZIP"</span>:
                        SetTextField(getXInput(<span class="highlight-literal">"AddressAddForm2"</span>, <span class="highlight-literal">"_POSTCODE_value"</span>), <span class="highlight-keyword">value</span>);
                        <span class="highlight-keyword">break</span>;
                    <span class="highlight-keyword">case</span> <span class="highlight-literal">"Do not send mail to this address"</span>:
                        SetCheckbox(getXInput(<span class="highlight-literal">"AddressAddForm2"</span>, <span class="highlight-literal">"_DONOTMAIL_value"</span>), <span class="highlight-keyword">value</span>);
                        <span class="highlight-keyword">break</span>;
                    <span class="highlight-keyword">default</span>:
                        <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> NotImplementedException(String.Format(<span class="highlight-literal">"Field '{0}' is not implemented."</span>, caption));
                }
            }
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACADAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            If you do not understand where the variables for the XPath constructors come from, please review the 
            <a href="8f3ad4c4-e6cf-4411-8d1a-7ca773037e33.htm">XPath Guidelines</a> walkthrough.
          </p></td></tr></table></div><p>
          This approach will handle the desired logic and UI interactions, but the code itself is bulky and unpleasant. The next section shows how manipulating the format of your table can lead to cleaner, more adaptable code.
        </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Table Guidelines</span></div><div id="ID3RBSection" class="collapsibleSection"><blockquote><a href="https://github.com/techtalk/SpecFlow/wiki/SpecFlow-Assist-Helpers" target="_blank">"Table headers are no longer required to be 'Field' and 'Value'"</a></blockquote><p>
          By changing the format of our feature file tables and how we pass variables to a step method, 
          we can take advantage of more functionality in the UAT SDK.
        </p><div class="mediaNear"><div class="caption">
            Here is the same test from the previous section with a different format for the Tables.
          </div><img alt="New Table Feature" src="../media/NewTableFeature.PNG" /></div><p>
          Changing the table's headers from "Field" and "Value" to the dialog's 
          field captions forces a change to the code and how it handles the 
          Table object.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAOACAAA_tab1" class="codeSnippetContainerTabSingle">Edited step definitions.</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAOACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAOACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAOACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[When(<span class="highlight-literal">@"I add an address to the current constituent"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> WhenIAddAnAddressToTheCurrentConstituent(Table addressTable)
{
    <span class="highlight-keyword">foreach</span> (TableRow row <span class="highlight-keyword">in</span> addressTable.Rows)
    {
        ConstituentPanel.SelectTab(<span class="highlight-literal">"Contact"</span>);
        ConstituentPanel.ClickSectionAddButton(<span class="highlight-literal">"Addresses"</span>);
        AddressDialog.SetAddressFields(row);
        Dialog.Save();
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAOACAAA");</script><p>
          Instead of passing the whole table to the SetMethod, we loop through the rows in the Table and pass in a single TableRow.
        </p><p>
          We only want to pass to the SetAddressFields() method an object that contains the relevant address dialog values. In the previous method, the entire Table object contained these values. In this situation, only a TableRow is needed to gather the necessary values.
        </p><p>
          Let's implement the method for handling a single TableRow.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAKACAAA_tab1" class="codeSnippetContainerTabSingle">Edited AddressDialog class.</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAKACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAKACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAKACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> Blueshirt.Core.Base;
<span class="highlight-keyword">using</span> Blueshirt.Core.Crm;
<span class="highlight-keyword">using</span> TechTalk.SpecFlow;

<span class="highlight-keyword">namespace</span> Delving_Deeper
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AddressDialog : Dialog
    {
        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">readonly</span> IDictionary&lt;<span class="highlight-keyword">string</span>, CrmField&gt; SupportedFields = <span class="highlight-keyword">new</span> Dictionary&lt;<span class="highlight-keyword">string</span>, CrmField&gt;
        {
            {<span class="highlight-literal">"Type"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_ADDRESSTYPECODEID_value"</span>, FieldType.Dropdown)},
            {<span class="highlight-literal">"Country"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_COUNTRYID_value"</span>, FieldType.Dropdown)},
            {<span class="highlight-literal">"Address"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_ADDRESSBLOCK_value"</span>, FieldType.TexArea)},
            {<span class="highlight-literal">"City"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_CITY_value"</span>, FieldType.TextInput)},
            {<span class="highlight-literal">"State"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_STATEID_value"</span>, FieldType.Dropdown)},
            {<span class="highlight-literal">"ZIP"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_POSTCODE_value"</span>, FieldType.TextInput)},
            {<span class="highlight-literal">"Do not send mail to this address"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_DONOTMAIL_value"</span>, FieldType.Checkbox)}
        };

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SetAddressFields(TableRow addressFields)
        {
            OpenTab(<span class="highlight-literal">"Address"</span>);
            SetFields(<span class="highlight-literal">"AddressAddForm2"</span>, addressFields, SupportedFields);
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAKACAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            Note there is also support in CrmFields for setting fields through a search dialog. Refer to the CrmField and FieldType API documentation to get a better understanding of the CrmField constructors.
          </p></td></tr></table></div><p>
          With a TableRow whose Keys represent the dialog's field captions, we can now utilize the API's Dialog.SetFields() method. Instead of creating a switch on the field caption value, we can create a dictionary mapping the supported field captions to the relevant variables needed to set the field's value. These variables are encapsulated in the CrmField class.
        </p><p>
          Now when we want to add support for a new field, we define the logic in a single line for the SupportedFields dictionary instead of a switch-case handler.
        </p><p>
          Let's examine the 'Then' step again. By changing the table format here, we no longer need to convert the Table to a Dictionary. Instead we can directly pass the TableRows of the Table to Panel.SectionDatalistRowExists().
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAFACAAA_tab1" class="codeSnippetContainerTabSingle">Edited 'Then' Step</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAFACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAFACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAFACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[Then(<span class="highlight-literal">@"an address exists"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> ThenAnAddressExists(Table addressTable)
{
    ConstituentPanel.SelectTab(<span class="highlight-literal">"Contact"</span>);
    <span class="highlight-keyword">foreach</span> (TableRow row <span class="highlight-keyword">in</span> addressTable.Rows)
    {
        <span class="highlight-keyword">if</span> (!ConstituentPanel.SectionDatalistRowExists(row, <span class="highlight-literal">"Addresses"</span>))
            FailTest(String.Format(<span class="highlight-literal">"Address '{0}' not found."</span>, row.Values));
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAFACAAA");</script><p>
          BUT WAIT THERE'S MORE!!!!!
        </p><p>
          With this format, we now also have the ability to add multiple addresses and validate multiple addresses simply by 
          adding rows to the table.  No additional code required.
        </p><div class="mediaNear"><div class="caption">
            Modify your test case to contain multiple rows.
          </div><img alt="New Table Multiple Rows Feature" src="../media/NewTableMultipleRowsFeature.PNG" /></div><p>
          The foreach loop in the step methods breaks down the Table to TableRows allowing us to reliably add and validate each address.
        </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            Empty table cells are treated as empty strings.
          </p><p>
            Leaving a cell as empty will result in the an attempt to set the field's value to an empty string. If you wish to skip setting the field, you must remove the key from the TableRow or set the value to null.
          </p><p>
            if (row.ContainsKey("Country") &amp;&amp; row["Country"] == String.Empty) row["Country"] = null;
          </p><p>
            Empty table cells for a datalist select or validation are skipped and no code edits are necessary.
          </p></td></tr></table></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Supporting Multiple Dialog Ids</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          Continuing from the previous section, let's create a test that edits an existing address.
        </p><div class="mediaNear"><div class="caption">
            Test case adding and editing an address.
          </div><img alt="New Table Edit Address Feature" src="../media/NewTableEditAddressFeature.PNG" /></div><p>
          Here are implementations for the new step methods.  Because of our table format, we can use TableRows to find and 
          select our desired address row before clicking Edit.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAFABAAA_tab1" class="codeSnippetContainerTabSingle">New step methods for editing and address</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAFABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAFABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAFABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[Given(<span class="highlight-literal">@"I add an address to the current constiteunt"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> GivenIAddAnAddressToTheCurrentConstiteunt(Table addressTable)
{
    WhenIAddAnAddressToTheCurrentConstituent(addressTable);
}

[When(<span class="highlight-literal">@"I start to edit an address on the current constituent"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> WhenIStartToEditAnAddressOnTheCurrentConstituent(Table addressTable)
{
    ConstituentPanel.SelectTab(<span class="highlight-literal">"Contact"</span>);
    ConstituentPanel.SelectSectionDatalistRow(addressTable.Rows[<span class="highlight-number">0</span>], <span class="highlight-literal">"Addresses"</span>);
    ConstituentPanel.WaitClick(ConstituentPanel.getXSelectedDatalistRowButton(<span class="highlight-literal">"Edit"</span>));
}

[When(<span class="highlight-literal">@"set the address fields and save the dialog"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> WhenSetTheAddressFields(Table addressTable)
{
    AddressDialog.SetAddressFields(addressTable.Rows[<span class="highlight-number">0</span>]);
    Dialog.Save();
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAFABAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
            Notice that you can call step methods from within step methods as done in GivenIAddAnAddressToTheCurrentConstiteunt().
          </p></td></tr></table></div><p>
          The above code will compile but fail against the application.  The implementation of SetAddressFields(TableRow addressFields) 
          statically enters "AddressAddForm2" as the dialog's unique if for the XPath constructors.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EACABAAA_tab1" class="codeSnippetContainerTabSingle">Static dialog id</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SetAddressFields(TableRow addressFields)
{
    OpenTab(<span class="highlight-literal">"Address"</span>);
    SetFields(<span class="highlight-literal">"AddressAddForm2"</span>, addressFields, SupportedFields);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACABAAA");</script><p>
          Instead of creating a separate method or class, we can create a list of supported dialog ids.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAABAAA_tab1" class="codeSnippetContainerTabSingle">AddressDialog with supported dialog ids.</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AddressDialog : Dialog
{
    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">readonly</span> <span class="highlight-keyword">string</span>[] DialogIds = { <span class="highlight-literal">"AddressAddForm2"</span>, <span class="highlight-literal">"AddressEditForm"</span> };

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">readonly</span> IDictionary&lt;<span class="highlight-keyword">string</span>, CrmField&gt; SupportedFields = <span class="highlight-keyword">new</span> Dictionary&lt;<span class="highlight-keyword">string</span>, CrmField&gt;
    {
        {<span class="highlight-literal">"Type"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_ADDRESSTYPECODEID_value"</span>, FieldType.Dropdown)},
        {<span class="highlight-literal">"Country"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_COUNTRYID_value"</span>, FieldType.Dropdown)},
        {<span class="highlight-literal">"Address"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_ADDRESSBLOCK_value"</span>, FieldType.TextArea)},
        {<span class="highlight-literal">"City"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_CITY_value"</span>, FieldType.TextInput)},
        {<span class="highlight-literal">"State"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_STATEID_value"</span>, FieldType.Dropdown)},
        {<span class="highlight-literal">"ZIP"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_POSTCODE_value"</span>, FieldType.TextInput)},
        {<span class="highlight-literal">"Do not send mail to this address"</span>, <span class="highlight-keyword">new</span> CrmField(<span class="highlight-literal">"_DONOTMAIL_value"</span>, FieldType.Checkbox)}
    };

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SetAddressFields(TableRow addressFields)
    {
        OpenTab(<span class="highlight-literal">"Address"</span>);
        SetFields(GetDialogId(DialogIds), addressFields, SupportedFields);
    }

}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABAAA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID5RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="https://github.com/techtalk/SpecFlow/wiki/SpecFlow-Assist-Helpers" target="_blank">SpecFlow Tables and TableRows</a></div></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>