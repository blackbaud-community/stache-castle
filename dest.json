{"doc":{"assembly":{"name":"Blueshirt.Core"},"members":{"member":[{"name":"T_Blueshirt_Core_Base_BaseComponent","summary":"\r\n            Base functionality that applies to entire BBCRM and BBIS products for automation.\r\n            ","params":{"inheritance":{"http://msdn2.microsoft.com/en-us/library/e5kfa45b":"SystemObject","#":"Blueshirt.Core.BaseBaseComponent","T_Blueshirt_Core_Bbis_Pages_BBISHomePage.htm":"Blueshirt.Core.Bbis.PagesBBISHomePage","T_Blueshirt_Core_Crm_BBCRMHomePage.htm":"Blueshirt.Core.CrmBBCRMHomePage","T_Blueshirt_Core_Crm_Dialog.htm":"Blueshirt.Core.CrmDialog","T_Blueshirt_Core_Crm_FunctionalArea.htm":"Blueshirt.Core.CrmFunctionalArea","T_Blueshirt_Core_Crm_Panel.htm":"Blueshirt.Core.CrmPanel"},"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public class BaseComponent","VB":"Public Class BaseComponent","C++":"public ref class BaseComponent"},"lower_syntax_text":"The BaseComponent type exposes the following members.","constructors":{"BaseComponent":{"link":"M_Blueshirt_Core_Base_BaseComponent__ctor.htm","description":"Initializes a new instance of the BaseComponent class","public":"","declared":"","notNetfw":""}},"methods":{"ClickButton":{"link":"M_Blueshirt_Core_Base_BaseComponent_ClickButton.htm","description":"\r\n            Clicks a basic button.\r\n            Uniqueness is dependent purely on the caption!\r\n            ","public":"","static":"","declared":"","notNetfw":""},"ConvertToBool":{"link":"M_Blueshirt_Core_Base_BaseComponent_ConvertToBool.htm","description":"\r\n            Convert the string to a bool value.\r\n            ","protected":"","static":"","declared":"","notNetfw":""},"CopyToClipBoard":{"link":"M_Blueshirt_Core_Base_BaseComponent_CopyToClipBoard.htm","description":"\r\n            Start a new thread that copies a value to the System's Clipboard and waits for that\r\n            thread to return.\r\n            ","protected":"","static":"","declared":"","notNetfw":""},"ElementValueIsNotNullOrEmpty":{"link":"M_Blueshirt_Core_Base_BaseComponent_ElementValueIsNotNullOrEmpty.htm","description":"\r\n            Wait until a displayed element found with the provided xPath does not have a null or empty value\r\n            If no matching element is found, a WebDriverTimeoutException is thrown.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"ElementValueIsSet":{"link":"M_Blueshirt_Core_Base_BaseComponent_ElementValueIsSet.htm","description":"\r\n            Wait until a displayed element found with the provided xPath has the expected value as its text.\r\n            If no matching element is found with the expected value, a WebDriverTimeoutException is thrown.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"EqualsObjectObjectObject":{"link":"http://msdn2.microsoft.com/en-us/library/bsc2ak47","description":"Determines whether the specified Object is equal to the current Object.","public":"","inherited":"","notNetfw":""},"Exists":{"link":"M_Blueshirt_Core_Base_BaseComponent_Exists.htm","description":"\r\n            Checks if a displayed element exists using the provided xPath selector.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"ExistsNow":{"link":"M_Blueshirt_Core_Base_BaseComponent_ExistsNow.htm","description":"\r\n            Check if a displayed element exists immediately using the provided xPath selector.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"FinalizeObject":{"link":"http://msdn2.microsoft.com/en-us/library/4k87zsw7","description":"Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.","protected":"","inherited":"","notNetfw":""},"GetDatalistColumnIndex":{"link":"M_Blueshirt_Core_Base_BaseComponent_GetDatalistColumnIndex.htm","description":"\r\n            Given the xPath for a datalist/grid's headers and the caption of a datalist column, find the index of the column\r\n            as it relates to the DOM.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"GetDisplayedElement":{"link":"M_Blueshirt_Core_Base_BaseComponent_GetDisplayedElement.htm","description":"\r\n            Get the displayed IWebElement using the provided xPath.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"GetEnabledElement":{"link":"M_Blueshirt_Core_Base_BaseComponent_GetEnabledElement.htm","description":"\r\n            Get the first found IWebElement based on an xPath that is Displayed AND Enabled.\r\n            If no element is found, a WebDriverTimeoutException is thrown.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"GetHashCodeObject":{"link":"http://msdn2.microsoft.com/en-us/library/zdee4b3y","description":"Serves as a hash function for a particular type. ","public":"","inherited":"","notNetfw":""},"GetTypeTypeObject":{"link":"http://msdn2.microsoft.com/en-us/library/dfwy45w9","description":"Gets the Type of the current instance.","public":"","inherited":"","notNetfw":""},"getXButton":{"link":"M_Blueshirt_Core_Base_BaseComponent_getXButton.htm","description":"\r\n            Format an XPath to find a button.  Adds no additional constraints other than\r\n            the caption of the button equalling the provided value.\r\n            ","protected":"","static":"","declared":"","notNetfw":""},"getXMenuItem":{"link":"M_Blueshirt_Core_Base_BaseComponent_getXMenuItem.htm","description":"\r\n            Given the caption name of a menu item, return a unique identifier xPath\r\n            to find a menu item.\r\n            ","protected":"","static":"","declared":"","notNetfw":""},"MapColumnCaptionsToIndex":{"link":"M_Blueshirt_Core_Base_BaseComponent_MapColumnCaptionsToIndex.htm","description":"\r\n            Create a mapping of the column captions as keys to their DOM index values.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"MemberwiseCloneObjectObject":{"link":"http://msdn2.microsoft.com/en-us/library/57ctke0a","description":"Creates a shallow copy of the current Object.","protected":"","inherited":"","notNetfw":""},"SetCheckbox(String, Boolean)":{"link":"M_Blueshirt_Core_Base_BaseComponent_SetCheckbox.htm","description":"\r\n            Click a checkbox if it is not the desired value.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"SetCheckbox(String, String)":{"link":"M_Blueshirt_Core_Base_BaseComponent_SetCheckbox_1.htm","description":"\r\n            Click a checkbox if it is not the desired value.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"SetCredentailsField":{"link":"M_Blueshirt_Core_Base_BaseComponent_SetCredentailsField.htm","description":"\r\n            Specialist version of setTextField to deal with the lack of focus in a login splash screen.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"SetTextField":{"link":"M_Blueshirt_Core_Base_BaseComponent_SetTextField.htm","description":"\r\n            Set the value of a field by copy pasting the value into the field and sending a Tab keystroke.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"ToStringObject":{"link":"http://msdn2.microsoft.com/en-us/library/7bxwbwt2","description":"Returns a string that represents the current object.","public":"","inherited":"","notNetfw":""},"WaitClick(String)":{"link":"M_Blueshirt_Core_Base_BaseComponent_WaitClick.htm","description":"\r\n            Find an element using a provided xPath and click it once it is displayed and enabled.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"WaitClick(String, Double)":{"link":"M_Blueshirt_Core_Base_BaseComponent_WaitClick_1.htm","description":"\r\n            Find an element using a provided xPath and click it once it is displayed and enabled.\r\n            ","public":"","static":"","declared":"","notNetfw":""}},"properties":{"Driver":{"link":"P_Blueshirt_Core_Base_BaseComponent_Driver.htm","description":"\r\n            Selenium WebDriver used to interact with the web browser.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"TimeoutSecs":{"link":"P_Blueshirt_Core_Base_BaseComponent_TimeoutSecs.htm","description":"\r\n            The default WebDriver timeout value represented in seconds.\r\n            ","public":"","static":"","declared":"","notNetfw":""},"Title":{"link":"P_Blueshirt_Core_Base_BaseComponent_Title.htm","description":"","public":"","declared":"","notNetfw":""}}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_getXButton","summary":"\r\n            Format an XPath to find a button.  Adds no additional constraints other than\r\n            the caption of the button equalling the provided value.\r\n            ","param":{"_":"The caption of the button.","name":"caption"},"params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"protected static string getXButton(\r\n\tstring caption\r\n)","VB":"Protected Shared Function getXButton ( \r\n\tcaption As String\r\n) As String","C++":"protected:\r\nstatic String^ getXButton(\r\n\tString^ caption\r\n)"},"arguments":{"caption":{"type":"AddLanguageSpecificTextSet(\"LST60A9D7_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The caption of the button."}},"return_val":{"type":"String","description":"Â "}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_getXMenuItem","summary":"\r\n            Given the caption name of a menu item, return a unique identifier xPath\r\n            to find a menu item.\r\n            ","param":{"_":"The caption of the functional area.","name":"caption"},"params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"protected static string getXMenuItem(\r\n\tstring caption\r\n)","VB":"Protected Shared Function getXMenuItem ( \r\n\tcaption As String\r\n) As String","C++":"protected:\r\nstatic String^ getXMenuItem(\r\n\tString^ caption\r\n)"},"arguments":{"caption":{"type":"AddLanguageSpecificTextSet(\"LST5EADAC39_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The caption of the functional area."}},"return_val":{"type":"String","description":"Â "}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_ConvertToBool","summary":"\r\n            Convert the string to a bool value.\r\n            ","param":{"_":"The string to try and convert to a bool.","name":"value"},"returns":"A bool if successfully converted.  Unrecognized values throw a NotSupportedException","params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"protected static bool ConvertToBool(\r\n\tstring value\r\n)","VB":"Protected Shared Function ConvertToBool ( \r\n\tvalue As String\r\n) As Boolean","C++":"protected:\r\nstatic bool ConvertToBool(\r\n\tString^ value\r\n)"},"arguments":{"value":{"type":"AddLanguageSpecificTextSet(\"LST936D4EA0_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The string to try and convert to a bool."}},"return_val":{"type":"Boolean","description":"Â A bool if successfully converted.  Unrecognized values throw a NotSupportedException"}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_SetCheckbox","summary":"\r\n            Click a checkbox if it is not the desired value.\r\n            ","param":[{"_":"The xPath to use for finding the checkbox INPUT.","name":"xPath"},{"_":"The value to set the checkbox to.","name":"value"}],"params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static void SetCheckbox(\r\n\tstring xPath,\r\n\tbool value\r\n)","VB":"Public Shared Sub SetCheckbox ( \r\n\txPath As String,\r\n\tvalue As Boolean\r\n)","C++":"public:\r\nstatic void SetCheckbox(\r\n\tString^ xPath, \r\n\tbool value\r\n)"},"arguments":{"xPath":{"type":"AddLanguageSpecificTextSet(\"LST3962AEF6_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The xPath to use for finding the checkbox INPUT."},"value":{"type":"AddLanguageSpecificTextSet(\"LST3962AEF6_2?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"True if the checkbox should be checked, false otherwise."}}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_SetCheckbox","summary":"\r\n            Click a checkbox if it is not the desired value.\r\n            ","param":[{"_":"The xPath to use for finding the checkbox INPUT.","name":"xPath"},{"_":"True if the checkbox should be checked, false otherwise.","name":"value"}],"params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static void SetCheckbox(\r\n\tstring xPath,\r\n\tbool value\r\n)","VB":"Public Shared Sub SetCheckbox ( \r\n\txPath As String,\r\n\tvalue As Boolean\r\n)","C++":"public:\r\nstatic void SetCheckbox(\r\n\tString^ xPath, \r\n\tbool value\r\n)"},"arguments":{"xPath":{"type":"AddLanguageSpecificTextSet(\"LST3962AEF6_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The xPath to use for finding the checkbox INPUT."},"value":{"type":"AddLanguageSpecificTextSet(\"LST3962AEF6_2?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"True if the checkbox should be checked, false otherwise."}}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_ElementValueIsNotNullOrEmpty","summary":"\r\n            Wait until a displayed element found with the provided xPath does not have a null or empty value\r\n            If no matching element is found, a WebDriverTimeoutException is thrown.\r\n            ","param":{"_":"The xPath to use for finding an element.","name":"xPath"},"params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static void ElementValueIsNotNullOrEmpty(\r\n\tstring xPath\r\n)","VB":"Public Shared Sub ElementValueIsNotNullOrEmpty ( \r\n\txPath As String\r\n)","C++":"public:\r\nstatic void ElementValueIsNotNullOrEmpty(\r\n\tString^ xPath\r\n)"},"arguments":{"xPath":{"type":"AddLanguageSpecificTextSet(\"LSTB3F9CACF_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The xPath to use for finding an element."}}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_ElementValueIsSet","summary":"\r\n            Wait until a displayed element found with the provided xPath has the expected value as its text.\r\n            If no matching element is found with the expected value, a WebDriverTimeoutException is thrown.\r\n            ","param":[{"_":"The xPath to use for finding an element.","name":"xPath"},{"_":"The expected text value of the element.","name":"expectedvalue"}],"params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static void ElementValueIsSet(\r\n\tstring xPath,\r\n\tstring expectedvalue\r\n)","VB":"Public Shared Sub ElementValueIsSet ( \r\n\txPath As String,\r\n\texpectedvalue As String\r\n)","C++":"public:\r\nstatic void ElementValueIsSet(\r\n\tString^ xPath, \r\n\tString^ expectedvalue\r\n)"},"arguments":{"xPath":{"type":"AddLanguageSpecificTextSet(\"LST50CEE2B8_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The xPath to use for finding an element."},"expectedvalue":{"type":"AddLanguageSpecificTextSet(\"LST50CEE2B8_2?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The expected text value of the element."}}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_ExistsNow","summary":"\r\n            Check if a displayed element exists immediately using the provided xPath selector.\r\n            ","param":{"_":"The xPath selector to find an element with.","name":"xPath"},"returns":"True if a valid element is found immediately, false otherwise.","params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static bool ExistsNow(\r\n\tstring xPath\r\n)","VB":"Public Shared Function ExistsNow ( \r\n\txPath As String\r\n) As Boolean","C++":"public:\r\nstatic bool ExistsNow(\r\n\tString^ xPath\r\n)"},"arguments":{"xPath":{"type":"AddLanguageSpecificTextSet(\"LSTE606FD71_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The xPath selector to find an element with."}},"return_val":{"type":"Boolean","description":"Â True if a valid element is found immediately, false otherwise."}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_Exists","summary":"\r\n            Checks if a displayed element exists using the provided xPath selector.\r\n            ","param":[{"_":"The xPath selector to find an element with.","name":"xPath"},{"_":"The time to spend looking for the element.  Defaults to TimeoutSecs.","name":"secondsToWait"}],"returns":"True if a valid element is found within the time to wait, false otherwise.","params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static bool Exists(\r\n\tstring xPath,\r\n\tdouble secondsToWait = -1\r\n)","VB":"Public Shared Function Exists ( \r\n\txPath As String,\r\n\tOptional secondsToWait As Double = -1\r\n) As Boolean","C++":"public:\r\nstatic bool Exists(\r\n\tString^ xPath, \r\n\tdouble secondsToWait = -1\r\n)"},"arguments":{"xPath":{"type":"AddLanguageSpecificTextSet(\"LSTA4AC57F2_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The xPath selector to find an element with."},"secondsToWait":{"type":"AddLanguageSpecificTextSet(\"LSTA4AC57F2_2?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The time to spend looking for the element.  Defaults to TimeoutSecs."}},"return_val":{"type":"Boolean","description":"Â True if a valid element is found within the time to wait, false otherwise."}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_GetDisplayedElement","summary":"\r\n            Get the displayed IWebElement using the provided xPath.\r\n            ","param":[{"_":"The xPath selector to find an element with.","name":"xPath"},{"_":"The amount of time to search for the a valid element.  Default time is TimeoutSecs.","name":"waitTime"}],"returns":"An IWebElement if a valid element is found. A WebDriverTimeoutException is thrown is no element is found.","params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static IWebElement GetDisplayedElement(\r\n\tstring xPath,\r\n\tdouble waitTime = -1\r\n)","VB":"Public Shared Function GetDisplayedElement ( \r\n\txPath As String,\r\n\tOptional waitTime As Double = -1\r\n) As IWebElement","C++":"public:\r\nstatic IWebElement^ GetDisplayedElement(\r\n\tString^ xPath, \r\n\tdouble waitTime = -1\r\n)"},"arguments":{"xPath":{"type":"AddLanguageSpecificTextSet(\"LST43E1B879_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The xPath selector to find an element with."},"waitTime":{"type":"AddLanguageSpecificTextSet(\"LST43E1B879_2?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The amount of time to search for the a valid element.  Default time is TimeoutSecs."}},"return_val":{"type":"","description":"Â An IWebElement if a valid element is found. A WebDriverTimeoutException is thrown is no element is found."}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_MapColumnCaptionsToIndex","summary":"\r\n            Create a mapping of the column captions as keys to their DOM index values.\r\n            ","param":[{"_":"The list of captions to map.","name":"captions"},{"_":"An xPath to get a parent element of the desired TR header columns.","name":"headersxPath"}],"returns":"Mapping of column captions to an index.","params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static IDictionary<string, int> MapColumnCaptionsToIndex(\r\n\tICollection<string> captions,\r\n\tstring headersxPath\r\n)","VB":"Public Shared Function MapColumnCaptionsToIndex ( \r\n\tcaptions As ICollection(Of String),\r\n\theadersxPath As String\r\n) As IDictionary(Of String, Integer)","C++":"public:\r\nstatic IDictionary<String^, int>^ MapColumnCaptionsToIndex(\r\n\tICollection<String^>^ captions, \r\n\tString^ headersxPath\r\n)"},"arguments":{"captions":{"type":"AddLanguageSpecificTextSet(\"LSTCC13064F_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");AddLanguageSpecificTextSet(\"LSTCC13064F_2?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(\");StringAddLanguageSpecificTextSet(\"LSTCC13064F_3?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)\");","description":"The list of captions to map."},"headersxPath":{"type":"AddLanguageSpecificTextSet(\"LSTCC13064F_4?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"An xPath to get a parent element of the desired TR header columns."}},"return_val":{"type":"IDictionary","description":"Â , Mapping of column captions to an index."}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_GetDatalistColumnIndex","summary":"\r\n            Given the xPath for a datalist/grid's headers and the caption of a datalist column, find the index of the column\r\n            as it relates to the DOM.\r\n            ","param":[{"_":"Unique xPath for getting the TR column header row.","name":"headersxPath"},{"_":"The caption of the section's datalist column whose index to find.","name":"columnCaption"}],"params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static int GetDatalistColumnIndex(\r\n\tstring headersxPath,\r\n\tstring columnCaption\r\n)","VB":"Public Shared Function GetDatalistColumnIndex ( \r\n\theadersxPath As String,\r\n\tcolumnCaption As String\r\n) As Integer","C++":"public:\r\nstatic int GetDatalistColumnIndex(\r\n\tString^ headersxPath, \r\n\tString^ columnCaption\r\n)"},"arguments":{"headersxPath":{"type":"AddLanguageSpecificTextSet(\"LST6AF5CFB_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"Unique xPath for getting the TR column header row."},"columnCaption":{"type":"AddLanguageSpecificTextSet(\"LST6AF5CFB_2?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The caption of the section&apos;s datalist column whose index to find."}},"return_val":{"type":"Int32","description":"Â "}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_GetEnabledElement","summary":"\r\n            Get the first found IWebElement based on an xPath that is Displayed AND Enabled.\r\n            If no element is found, a WebDriverTimeoutException is thrown.\r\n            ","param":[{"_":"The xPath selector to find an element with.","name":"xPath"},{"_":"The amount of time to search for the a valid element.  Default time is TimeoutSecs.","name":"waitTime"}],"params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static IWebElement GetEnabledElement(\r\n\tstring xPath,\r\n\tdouble waitTime = -1\r\n)","VB":"Public Shared Function GetEnabledElement ( \r\n\txPath As String,\r\n\tOptional waitTime As Double = -1\r\n) As IWebElement","C++":"public:\r\nstatic IWebElement^ GetEnabledElement(\r\n\tString^ xPath, \r\n\tdouble waitTime = -1\r\n)"},"arguments":{"xPath":{"type":"AddLanguageSpecificTextSet(\"LST34EF8F6D_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The xPath selector to find an element with."},"waitTime":{"type":"AddLanguageSpecificTextSet(\"LST34EF8F6D_2?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The amount of time to search for the a valid element.  Default time is TimeoutSecs."}},"return_val":{"type":"","description":"Â "}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_ClickButton","summary":"\r\n            Clicks a basic button.\r\n            Uniqueness is dependent purely on the caption!\r\n            ","param":{"name":"caption"},"params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static void ClickButton(\r\n\tstring caption\r\n)","VB":"Public Shared Sub ClickButton ( \r\n\tcaption As String\r\n)","C++":"public:\r\nstatic void ClickButton(\r\n\tString^ caption\r\n)"},"arguments":{"caption":{"type":"AddLanguageSpecificTextSet(\"LST71F8C7B4_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");[Missing <param name=\"caption\"/> documentation for \"M:Blueshirt.Core.Base.BaseComponent.ClickButton(System.String)\"]","description":"<p style=\"color: #dc143c; font-size: 8.5pt; font-weight: bold;\">[Missing &lt;param name=&quot;caption&quot;/&gt; documentation for &quot;M:Blueshirt.Core.Base.BaseComponent.ClickButton(System.String)&quot;]</p>"}}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_WaitClick","summary":"\r\n            Find an element using a provided xPath and click it once it is displayed and enabled.\r\n            ","param":[{"_":"The xPath to find the element by.","name":"xPath"},{"_":"The amount of time to try and find a displayed and enabled element to click\r\n            before throwing a WebDriverTimeoutException.","name":"timeout"}],"params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static void WaitClick(\r\n\tstring xPath\r\n)","VB":"Public Shared Sub WaitClick ( \r\n\txPath As String\r\n)","C++":"public:\r\nstatic void WaitClick(\r\n\tString^ xPath\r\n)"},"arguments":{"xPath":{"type":"AddLanguageSpecificTextSet(\"LST37DC4DA8_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The xPath to find the element by."}}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_WaitClick","summary":"\r\n            Find an element using a provided xPath and click it once it is displayed and enabled.\r\n            ","param":{"_":"The xPath to find the element by.","name":"xPath"},"params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static void WaitClick(\r\n\tstring xPath\r\n)","VB":"Public Shared Sub WaitClick ( \r\n\txPath As String\r\n)","C++":"public:\r\nstatic void WaitClick(\r\n\tString^ xPath\r\n)"},"arguments":{"xPath":{"type":"AddLanguageSpecificTextSet(\"LST37DC4DA8_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The xPath to find the element by."}}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_CopyToClipBoard","summary":"\r\n            Start a new thread that copies a value to the System's Clipboard and waits for that\r\n            thread to return.\r\n            ","param":{"_":"The value to copy to the clipboard.","name":"value"},"params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"protected static void CopyToClipBoard(\r\n\tstring value\r\n)","VB":"Protected Shared Sub CopyToClipBoard ( \r\n\tvalue As String\r\n)","C++":"protected:\r\nstatic void CopyToClipBoard(\r\n\tString^ value\r\n)"},"arguments":{"value":{"type":"AddLanguageSpecificTextSet(\"LST86C5E82F_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The value to copy to the clipboard."}}}},{"name":"M_Blueshirt_Core_Base_BaseComponent_SetTextField","summary":"\r\n            Set the value of a field by copy pasting the value into the field and sending a Tab keystroke.\r\n            ","param":[{"_":"The xPath to find an element for setting the value to.","name":"xPath"},{"_":"The desired value of the element.","name":"value"}],"params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static void SetTextField(\r\n\tstring xPath,\r\n\tstring value\r\n)","VB":"Public Shared Sub SetTextField ( \r\n\txPath As String,\r\n\tvalue As String\r\n)","C++":"public:\r\nstatic void SetTextField(\r\n\tString^ xPath, \r\n\tString^ value\r\n)"},"arguments":{"xPath":{"type":"AddLanguageSpecificTextSet(\"LST46494BD8_1?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The xPath to find an element for setting the value to."},"value":{"type":"AddLanguageSpecificTextSet(\"LST46494BD8_2?cs=.|vb=.|cpp=::|nu=.|fs=.\");","description":"The desired value of the element."}}}},{"name":"P_Blueshirt_Core_Base_BaseComponent_TimeoutSecs","summary":"\r\n            The default WebDriver timeout value represented in seconds.\r\n            ","params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static int TimeoutSecs { get; }","VB":"Public Shared ReadOnly Property TimeoutSecs As Integer\r\n\tGet","C++":"public:\r\nstatic property int TimeoutSecs {\r\n\tint get ();\r\n}"}}},{"name":"P_Blueshirt_Core_Base_BaseComponent_Driver","summary":"\r\n            Selenium WebDriver used to interact with the web browser.\r\n            ","params":{"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public static IWebDriver Driver { get; }","VB":"Public Shared ReadOnly Property Driver As IWebDriver\r\n\tGet","C++":"public:\r\nstatic property IWebDriver^ Driver {\r\n\tIWebDriver^ get ();\r\n}"}}},{"name":"T_Blueshirt_Core_Base_FieldType","summary":"\r\n            Represents the various type of fields with supported setter utility methods.\r\n            ","params":{"inheritance":{},"namespace":{"N_Blueshirt_Core_Base.htm":"Blueshirt.Core.Base"},"assembly":"?","syntax":{"C#":"public enum FieldType","VB":"Public Enumeration FieldType","C++":"public enum class FieldType"},"lower_syntax_text":"","constructors":{},"methods":{},"fields":{}}},{"name":"F_Blueshirt_Core_Base_FieldType_TextInput","summary":"\r\n            An input text field.  This should also be used for grid cells that are text fields.\r\n            "},{"name":"F:Blueshirt.Core.Base.FieldType.TextArea","summary":"\r\n            A textarea text field.\r\n            "},{"name":"F:Blueshirt.Core.Base.FieldType.Dropdown","summary":"\r\n            A dropdown field.\r\n            "},{"name":"F:Blueshirt.Core.Base.FieldType.Searchlist","summary":"\r\n            A searchlist field.\r\n            "},{"name":"F:Blueshirt.Core.Base.FieldType.Checkbox","summary":"\r\n            A checkbox or radiobox field.\r\n            "},{"name":"F:Blueshirt.Core.Base.FieldType.TextIframe","summary":"\r\n            An IFrame text field.\r\n            "},{"name":"T:Blueshirt.Core.Base.CrmField","summary":"\r\n            Wrapper class to encapsulate a field caption with a field type, unique element id, and search dialog ids when required.\r\n            "},{"name":"F:Blueshirt.Core.Base.CrmField.Id","summary":"\r\n            The unique Id contained in the id attribute.\r\n            i.e. '_CONSTITUENTID_value'\r\n            "},{"name":"F:Blueshirt.Core.Base.CrmField.CellType","summary":"\r\n            The type of field.  Used to associate the field with a setter utility method.\r\n            "},{"name":"F:Blueshirt.Core.Base.CrmField.SearchDialogId","summary":"\r\n            The unique id of the search dialog that would appear upon clicking the search icon of\r\n            the associated grid cell.\r\n            i.e. 'DesignationSearch'\r\n            Used for fields associated with 'BatchGridCellType.Searchlist'.\r\n            "},{"name":"F:Blueshirt.Core.Base.CrmField.SearchDialogFieldId","summary":"\r\n            The unique id of the search dialog field that would appear upon clicking the search icon of\r\n            the associated grid cell.\r\n            i.e. 'COMBINEDSEARCH'\r\n            Used for fields associated with 'BatchGridCellType.Searchlist'.\r\n            "},{"name":"M:Blueshirt.Core.Base.CrmField.#ctor(System.String,Blueshirt.Core.Base.FieldType)","summary":"\r\n            Set the field id and associated setter utility method.\r\n            ","param":[{"_":"The unique Id contained in the id attribute.  i.e. '_CONSTITUENTID_value'","name":"id"},{"_":"The type of grid cell.  Used to associate the cell with a setter utility method.","name":"cellType"}]},{"name":"M:Blueshirt.Core.Base.CrmField.#ctor(System.String,Blueshirt.Core.Base.FieldType,System.String,System.String)","summary":"\r\n            Set the batch column id and associated setter utility method.  To only be used\r\n            with grid cells where the value should be set using a searchlist.\r\n            ","param":[{"_":"The unique Id contained in the class attribute.  i.e. '_CONSTITUENTID_value'","name":"id"},{"_":"The type of grid cell.  Used to associate the cell with a setter utility method.","name":"cellType"},{"_":"The unique id of the search dialog that would appear upon clicking the search icon of\r\n            the associated grid cell.  i.e. 'DesignationSearch'","name":"searchDialogId"},{"_":"The unique id of the search dialog field that would appear upon clicking the search icon of\r\n            the associated grid cell.  i.e. 'COMBINEDSEARCH'","name":"searchDialogFieldId"}]},{"name":"T:Blueshirt.Core.Base.BaseSteps","summary":"\r\n            Base class for Specflow Step classes.  Provides access to common functionality in step classes.\r\n            "},{"name":"F:Blueshirt.Core.Base.BaseSteps.uniqueStamp","summary":"\r\n            Time stamp that should be static for all test step definitions in a single test\r\n            "},{"name":"M:Blueshirt.Core.Base.BaseSteps.FailTest(System.String)","summary":"\r\n            Fail a test by throwing a SpecFlowException with the provided message\r\n            ","param":{"_":"The message to output with the SpecFlowException","name":"errorMessage"}},{"name":"T:Blueshirt.Core.Crm.CommitmentsDialog","summary":"\r\n            Class to handle the interactions for adding/editing a commitments dialog.\r\n            "},{"name":"T:Blueshirt.Core.Crm.Dialog","summary":"\r\n            Base class to handle the interactions for dialogs. \r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialog.getXTabStrip","summary":"\r\n            Constant xPath for the tab strip of a dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialog.getXGridEditCellSearchlist","summary":"\r\n            Constant xPath for the searchlist icon of a grid's edit cell.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialog.getXGridEditCellDropdownArrow","summary":"\r\n            Constant xPath for the dropdown arrow of a grid's edit cell.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialog.getXGridEditCell","summary":"\r\n            The unique xPath for the input of the currently selected cell in a Grid.\r\n            \r\n            When a grid cell is selected, an HTML edit input is created where the actual value should\r\n            be set.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialog.getXGridFocusedEditCell","summary":"\r\n            The unique xPath for the input of the currently selected cell in a Grid adding the 'focused' criteria\r\n            \r\n            NOTE: this is risky to use because the focus attribute is unreliably set and can cause MANY race conditions.\r\n            The 'focused' criteria is also not always set on the edit cell depending on the approach you went to select a grid cell.\r\n            \r\n            When a grid cell is selected, an HTML edit input is created where the actual value should\r\n            be set.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialog.getXIFrameHtmlBodyP","summary":"\r\n            Constant xPath for the 'mceContentBody' of an HTML element.  This is generally in an IFrame field.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialog.getXSaveAndCloseButton","summary":"\r\n            Constant xPath value for finding a 'Save and close' button WebElement.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialog.getXYesButton","summary":"\r\n            Constant xPath value for finding a 'Yes' button WebElement.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialog.getXOKButton","summary":"\r\n            Constant xPath value for finding an OK button WebElement.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialog.getXCancelButton","summary":"\r\n            Constant xPath value for finding a Cancel button WebElement.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialog.getXSaveButton","summary":"\r\n            Constant xPath value for finding a Save button WebElement.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialog.getXDropdownList","summary":"\r\n            Constant xPath for the entire visible dropdown list.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialog.getXDropdownListItems","summary":"\r\n            Constant xPath for all items in the visible dropdown list.\r\n            "},{"name":"M:Blueshirt.Core.Crm.Dialog.getXTab(System.String)","summary":"\r\n            Format a unique xPath for a tab on a dialog.\r\n            ","param":{"_":"The caption of the tab.","name":"tabCaption"}},{"name":"M:Blueshirt.Core.Crm.Dialog.getXTab(System.String,System.String)","summary":"\r\n            Format a unique xPath for a tab on a dialog.\r\n            ","param":[{"_":"The caption of the tab.","name":"tabCaption"},{"_":"The dialog's unique id identifier - i.e. 'RevenueBatchConstituentInbatchEditForm'","name":"dialogId"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.OpenTab(System.String)","summary":"\r\n            Open the tab of a dialog.\r\n            ","param":{"_":"The caption of the tab.","name":"caption"}},{"name":"M:Blueshirt.Core.Crm.Dialog.OpenTab(System.String,System.String)","summary":"\r\n            Open the tab of a dialog.\r\n            ","param":[{"_":"The caption of the tab.","name":"caption"},{"_":"The dialog's unique id identifier - i.e. 'RevenueBatchConstituentInbatchEditForm'","name":"dialogId"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXCloseX","summary":"\r\n            Returns an xPath for the close Window [X] on the Dialog.\r\n            \r\n            "},{"name":"M:Blueshirt.Core.Crm.Dialog.getXDialogButton(System.String)","summary":"\r\n            Returns an xPath for any button that is a decendant of a visible bbui-dialog and having \"buttonText\" text.\r\n            Uniqueness depends on the text passed.\r\n            \r\n            ","param":{"_":"The text of the required button.","name":"buttonText"}},{"name":"M:Blueshirt.Core.Crm.Dialog.getXEntireDialogButton(System.String,System.String)","summary":"\r\n            Format an xPath for finding a dialog's button including the common bottom bar that contains buttons\r\n            such as Save, Close, and Cancel.\r\n            ","param":[{"_":"The caption of the button.","name":"buttonText"},{"_":"The dialog's unique id identifier - i.e. 'RevenueBatchConstituentInbatchEditForm'","name":"dialogId"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXDialogButton(System.String,System.String)","summary":"\r\n            Format an xPath for finding a dialog's button.\r\n            ","param":[{"_":"The caption of the button.","name":"buttonText"},{"_":"The dialog's unique id identifier - i.e. 'RevenueBatchConstituentInbatchEditForm'","name":"dialogId"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXGridCell(System.String,System.String,System.Int32,System.Int32)","summary":"\r\n            Formats the unique xPath for getting a single grid TD element that belongs to a specified\r\n            row and columun in a grid on a dialog.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. 'PlanOutlineAddForm'","name":"dialogId"},{"_":"The HTML [] element's unique id identifier - i.e. 'PLANOUTLINESTEPS'","name":"gridId"},{"_":"Row number to use.  Counting starts at 1","name":"row"},{"_":"Column index to use.  Column indexing does NOT always start at 1 or 0 as columns can be hidden.","name":"columnIndex"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXGridRow(System.String,System.String,System.Int32)","summary":"\r\n            Formats the unique xPath for getting a single grid row.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. 'PlanOutlineAddForm'","name":"dialogId"},{"_":"The HTML [] element's unique id identifier - i.e. 'PLANOUTLINESTEPS'","name":"gridId"},{"_":"Row number to use.  Counting starts at 1","name":"row"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXGridRowSelector(System.String,System.String,System.Int32)","summary":"\r\n            Format the unique xPath for selecting a single grid row.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. 'PlanOutlineAddForm'","name":"dialogId"},{"_":"The HTML [] element's unique id identifier - i.e. 'PLANOUTLINESTEPS'","name":"gridId"},{"_":"Row number to use.  Counting starts at 1","name":"row"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXGridHeaders(System.String,System.String)","summary":"\r\n            Formats the unique xPath for getting the TR row header element that belongs to\r\n            a grid on a dialog.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. 'PlanOutlineAddForm'","name":"dialogId"},{"_":"The HTML [] element's unique id identifier - i.e. 'PLANOUTLINESTEPS'","name":"gridId"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXIFrame(System.String,System.String)","summary":"\r\n            Given the unique HTML element ids of a dialog and div, return a unique identifier xPath\r\n            to find the IFRAME field.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. '_individualSpouseBusinessAddForm'","name":"dialogId"},{"_":"The DIV element's unique id identifier - i.e. 'HTMLNOTE'","name":"divId"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXLinkByAction(System.String,System.String)","summary":"\r\n            Format an xPath to find a link on the dialog.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. '_individualSpouseBusinessAddForm'","name":"dialogId"},{"_":"The unique id associated with the link - i.e. 'SPLITSACTION'","name":"linkId"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXLinkByCaption(System.String,System.String)","summary":"\r\n            Format an xPath to find a link on the dialog.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. '_individualSpouseBusinessAddForm'","name":"dialogId"},{"_":"'The caption/text of the link.","name":"caption"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXDiv(System.String,System.String)","summary":"\r\n            Given the unique HTML element ids of a dialog and div, return a unique identifier xPath\r\n            to find the DIV field.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. 'PledgeAddForm'","name":"dialogId"},{"_":"The 'a' link element's unique id identifier - i.e. 'SHOWSYSTEM'","name":"divId"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXTextArea(System.String,System.String)","summary":"\r\n            Given the unique HTML element ids of a dialog and textarea, return a unique identifier xPath\r\n            to find the TEXTAREA field.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. '_individualSpouseBusinessAddForm'","name":"dialogId"},{"_":"The TEXTAREA element's unique id identifier - i.e. '_DESCRIPTION_value'","name":"textAreaId"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXButton(System.String,System.String)","summary":"\r\n            Format a unique xPath identifier to find a button on a dialog.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. 'EventManagementTemplateAddDataForm'","name":"dialogId"},{"_":"The caption of the button.","name":"buttonCaption"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXSpan(System.String,System.String)","summary":"\r\n            Given the unique HTML element ids of a dialog and span, return a unique identifier xPath\r\n            to find the SPAN field.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. '_EventSummaryViewForm3'","name":"dialogId"},{"_":"The SPAN element's unique id identifier - i.e. '_LOCATION_value'","name":"spanId"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXInput(System.String,System.String)","summary":"\r\n            Given the unique HTML element ids of a dialog and input, return a unique identifier xPath\r\n            to find the INPUT field.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. '_individualSpouseBusinessAddForm'","name":"dialogId"},{"_":"The INPUT element's unique id identifier - i.e. '_LASTNAME_value'","name":"inputId"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.getXInputSearchTrigger(System.String)","summary":"\r\n            Format an xPath to find the search trigger button associated with an input field.\r\n            ","param":{"_":"The unique xPath of the dialog input.  Likely will have used Dialog.getXInput() to format\r\n            the xPath.","name":"dialogInputXPath"}},{"name":"M:Blueshirt.Core.Crm.Dialog.getXInputNewFormTrigger(System.String)","summary":"\r\n            Format an xPath to find the new-form trigger button associated with an input field.\r\n            ","param":{"_":"The unique xPath of the dialog input.  Likely will have used Dialog.getXInput() to format\r\n            the xPath.","name":"dialogInputXPath"}},{"name":"M:Blueshirt.Core.Crm.Dialog.getXVisibleDialog","summary":"\r\n            Format an xPath to get a visible dialog.\r\n            "},{"name":"M:Blueshirt.Core.Crm.Dialog.getXDialogById(System.String)","summary":"\r\n            Format an xPath to get a dialog based on its unique id.\r\n            ","param":{"_":"The dialog's unique id identifier - i.e. 'FundraisingSearch'","name":"dialogId"}},{"name":"M:Blueshirt.Core.Crm.Dialog.getXDialogByClass(System.String)","summary":"\r\n            Format an xPath to get a dialog based on an value contained in the class attribute of the root dialog DIV.\r\n            ","param":{"_":"The value to see if contained in the class attribute.","name":"classValue"}},{"name":"M:Blueshirt.Core.Crm.Dialog.Yes","summary":"\r\n            Click the 'Yes' button\r\n            "},{"name":"M:Blueshirt.Core.Crm.Dialog.OK","summary":"\r\n            Click the 'OK' button\r\n            "},{"name":"M:Blueshirt.Core.Crm.Dialog.Cancel","summary":"\r\n            Click the 'Cancel' button\r\n            "},{"name":"M:Blueshirt.Core.Crm.Dialog.Save","summary":"\r\n            Click the 'Save' button\r\n            "},{"name":"M:Blueshirt.Core.Crm.Dialog.getXDropdownItem(System.String)","summary":"\r\n            Formats an xPath for a dropdown item.\r\n            ","param":{"_":"The caption value of the dropdown list item.","name":"caption"}},{"name":"M:Blueshirt.Core.Crm.Dialog.getXDropdownArrow(System.String)","summary":"\r\n            Formats an xPath for the arrow dropdown of a dropdown INPUT field.\r\n            ","param":{"_":"The xPath of the dropdown.  Advised to use Dialog.getXInput()","name":"dropdownxPath"}},{"name":"M:Blueshirt.Core.Crm.Dialog.DropdownValueExists(System.String,System.String)","summary":"\r\n            Check if a value exists as a selectable item in a dropdown list.\r\n            ","param":[{"_":"The xPath of the dropdown.  Advised to use Dialog.getXInput()","name":"xPath"},{"_":"The value to check for as an option in the dropdown.","name":"value"}],"returns":"True if the value is an option, false otherwise."},{"name":"M:Blueshirt.Core.Crm.Dialog.SetHtmlField(System.String,System.String)","summary":"\r\n            Set an IFrame HTML field's value.\r\n            ","param":[{"_":"The xPath of the IFrame.  Advised to use Dialog.getXIFrame()","name":"xPath"},{"_":"The value to set in the HTML body of the IFrame.","name":"value"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.SetDropDown(System.String,System.String)","summary":"\r\n            Set a Dropdown field.\r\n            \r\n            WebDriverTimeoutException is thrown if no value is found.\r\n            ","param":[{"_":"The xPath to find the dropdown INPUT element with","name":"xPath"},{"_":"The value to set the dropdown to.","name":"value"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.SetGridSearchList(System.String,System.String,System.String)","summary":"\r\n            Set a grid cell's value using the searchlist.\r\n            ","param":[{"_":"The xPath of the grid cell TD element.","name":"xPath"},{"_":"The xPath of the search dialog's field to set.","name":"searchDialogxPath"},{"_":"The value to set and use as search criteria in the specified search dialog field.","name":"value"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.SetGridDropDown(System.String,System.String)","summary":"\r\n            Set a Grid cell's value for a dropdown field.\r\n            ","param":[{"_":"The xPath of the grid cell TD element.","name":"xPath"},{"_":"The value to set the cell to.","name":"value"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.SetGridTextField(System.String,System.String)","summary":"\r\n            Set a Grid cell's value for a text field.\r\n            ","param":[{"_":"The xPath of the grid cell TD element.","name":"xPath"},{"_":"The value to set the cell to.","name":"value"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.SetSearchList(System.String,System.String,System.String)","summary":"\r\n            Set a field's value using the associated search dialog to the first found item in the search results.\r\n            ","param":[{"_":"The xPath of the field to set.","name":"xPath"},{"_":"The xPath of the search dialog's field to set.","name":"searchFieldxPath"},{"_":"The value to set and use as search criteria in the specified search dialog field.","name":"value"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.ClickButton(System.String,System.String)","summary":"\r\n            Click a button that has a new dialog appear.  Continuely click the button\r\n            until the new dialog appears.\r\n            ","param":[{"_":"The caption of the dialog button","name":"caption"},{"_":"The new dialog's unique id identifer. i.e. - 'RevenueBatchConstituentInbatchEditForm' \r\n            If null is provided, then the method waits for a message box dialog that contains no unique id.","name":"dialogId"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.ClickButton(System.String,System.Double)","summary":"\r\n            Click a dialog button.\r\n            ","param":[{"_":"The caption of the dialog button.","name":"caption"},{"_":"The amount of time to try and find a valid button to click before\r\n            a WebDriverTimeoutException is thrown.","name":"timeout"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.ClickButton(System.String)","summary":"\r\n            Click a dialog button.\r\n            ","param":{"_":"The caption of the dialog button.","name":"caption"}},{"name":"M:Blueshirt.Core.Crm.Dialog.GetDialogId(System.Collections.Generic.IEnumerable{System.String})","summary":"\r\n            Wait for a dialog to appear that has a unique is in the provided list of\r\n            ids and return the matching id.\r\n            ","param":{"_":"A list of ids to wait for.","name":"supportedIds"},"returns":"The first found matching id for a dialog that is visible with that id.\r\n            If no id is found, a WebDriverTimeoutException is eventually thrown."},{"name":"M:Blueshirt.Core.Crm.Dialog.SetField(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,Blueshirt.Core.Base.CrmField})","summary":"\r\n            Set any supported field's value for any supported field type.\r\n            ","param":[{"_":"The unique of the dialog.  i.e. 'RevenueBatchConstituentInbatchEditForm'","name":"dialogId"},{"_":"The caption of the field.","name":"caption"},{"_":"The desired value of the field.","name":"value"},{"_":"Mapping of the supported field captions to a CrmField object encapsulating all relevant variables\r\n            needed to set the field's value.","name":"supportedFields"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.SetFields(System.String,TechTalk.SpecFlow.TableRow,System.Collections.Generic.IDictionary{System.String,Blueshirt.Core.Base.CrmField})","summary":"\r\n            Set all supported and displayed field values for any supported field type.\r\n            ","param":[{"_":"The unique id of the dialog.  i.e. 'RevenueBatchConstituentInbatchEditForm'","name":"dialogId"},{"_":"Mapping of the field captions to their desired values.","name":"fields"},{"_":"Mapping of the supported field captions to a CrmField object encapsulating all relevant variables\r\n            needed to set the field's value.","name":"supportedFields"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.SetFields(System.String,TechTalk.SpecFlow.TableRow,System.Collections.Generic.IDictionary{System.String,Blueshirt.Core.Base.CrmField},System.Collections.Generic.IDictionary{System.String,Blueshirt.Core.Base.CrmField})","summary":"\r\n            Set all supported and displayed field values for any supported field type.\r\n            ","param":[{"_":"The unique id of the dialog.  i.e. 'RevenueBatchConstituentInbatchEditForm'","name":"dialogId"},{"_":"Mapping of the field captions to their desired values.","name":"fields"},{"_":"Mapping of the supported field captions to a CrmField object encapsulating all relevant variables\r\n            needed to set the field's value.","name":"supportedFields"},{"_":"Mapping of field captions to to a CrmField oject encapsulating\r\n            all relevant variables.  Field in the supportedFields mapping can be overridden by including them in this mapping.","name":"customSupportedFields"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.SetGridRow(System.String,System.String,TechTalk.SpecFlow.TableRow,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,Blueshirt.Core.Base.CrmField})","summary":"\r\n            Set a single row's values for a grid.\r\n            ","param":[{"_":"The unique id of the dialog.  i.e. 'EventTaskAddForm'","name":"dialogId"},{"_":"The unique id of the grid - i.e. '_REMINDERS_'","name":"gridId"},{"_":"Mapping of the column captions to a single row's desired values.","name":"row"},{"_":"The index of the row to set.  \r\n            The first row's index is represented as 1.","name":"rowIndex"},{"_":"Mapping of the column captions to their DOM TR index.","name":"columnCaptionToIndex"},{"_":"Mapping of the supported field captions to a CrmField object encapsulating all relevant variables\r\n            needed to set the field's value.","name":"supportedFields"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.SetGridRow(System.String,System.String,TechTalk.SpecFlow.TableRow,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,Blueshirt.Core.Base.CrmField},System.Collections.Generic.IDictionary{System.String,Blueshirt.Core.Base.CrmField})","summary":"\r\n            Set a single row's values for a grid.\r\n            ","param":[{"_":"The unique id of the dialog.  i.e. 'EventTaskAddForm'","name":"dialogId"},{"_":"The unique id of the grid - i.e. '_REMINDERS_'","name":"gridId"},{"_":"Mapping of the column captions to a single row's desired values.","name":"row"},{"_":"The index of the row to set.  \r\n            The first row's index is represented as 1.","name":"rowIndex"},{"_":"Mapping of the column captions to their DOM TR index.","name":"columnCaptionToIndex"},{"_":"Mapping of the supported field captions to a CrmField object encapsulating all relevant variables\r\n            needed to set the field's value.","name":"supportedFields"},{"_":"Mapping of field captions to a CrmField oject encapsulating\r\n            all relevant variables.  Field in the supportedFields mapping can be overridden by including them in this mapping.","name":"customSupportedFields"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.SetGridRows(System.String,System.String,TechTalk.SpecFlow.Table,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,Blueshirt.Core.Base.CrmField})","summary":"\r\n            Set the row values for a grid.\r\n            ","param":[{"_":"The unique id of the dialog.  i.e. 'EventTaskAddForm'","name":"dialogId"},{"_":"The unique id of the grid - i.e. '_REMINDERS_'","name":"gridId"},{"_":"Table where each TableRow a row to set.\r\n            Each TableRow is a mapping of the column captions to a single row's desired values.","name":"rows"},{"_":"The row index to start adding rows from.  \r\n            The first row's index is represented as 1.","name":"startingRowIndex"},{"_":"Mapping of the column captions to their DOM TR index.","name":"columnCaptionToIndex"},{"_":"Mapping of the supported field captions to a CrmField object encapsulating all relevant variables\r\n            needed to set the field's value.","name":"supportedFields"}]},{"name":"M:Blueshirt.Core.Crm.Dialog.SetGridRows(System.String,System.String,TechTalk.SpecFlow.Table,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,Blueshirt.Core.Base.CrmField},System.Collections.Generic.IDictionary{System.String,Blueshirt.Core.Base.CrmField})","summary":"\r\n            Set the row values for a grid.\r\n            ","param":[{"_":"The unique id of the dialog.  i.e. 'EventTaskAddForm'","name":"dialogId"},{"_":"The unique id of the grid - i.e. '_REMINDERS_'","name":"gridId"},{"_":"Table where each TableRow a row to set.\r\n            Each TableRow is a mapping of the column captions to a single row's desired values.","name":"rows"},{"_":"The row index to start adding rows from.  \r\n            The first row's index is represented as 1.","name":"startingRowIndex"},{"_":"Mapping of the column captions to their DOM TR index.","name":"columnCaptionToIndex"},{"_":"Mapping of the supported field captions to a CrmField object encapsulating all relevant variables\r\n            needed to set the field's value.","name":"supportedFields"},{"_":"Mapping of field captions to to a CrmField oject encapsulating\r\n            all relevant variables.  Field in the supportedFields mapping can be overridden by including them in this mapping.","name":"customSupportedFields"}]},{"name":"F:Blueshirt.Core.Crm.CommitmentsDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"F:Blueshirt.Core.Crm.CommitmentsDialog.SupportedAddtionalApplicationsGridFields","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"M:Blueshirt.Core.Crm.CommitmentsDialog.SetAdditionalApplicationsGridRows(TechTalk.SpecFlow.Table)","summary":"\r\n            Set the grid rows for the Additional applications grid starting with the first row.\r\n            ","param":{"_":"Table where each TableRow corresponds to a grid row's values.\r\n            A TableRow is a mapping of the column captions to a single row's desired values","name":"applications"}},{"name":"T:Blueshirt.Core.Crm.DesignationsDialog","summary":"\r\n            Class to handle the interactions for adding/editing a designations dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.DesignationsDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"M:Blueshirt.Core.Crm.DesignationsDialog.SplitDesignationsEvenly(TechTalk.SpecFlow.Table)","summary":"\r\n            Set the designations grid rows starting with the first row and distribute the amount evenly.\r\n            ","param":{"_":"Table where each TableRow corresponds to a grid row's values.\r\n            A TableRow is a mapping of the column captions to a single row's desired values","name":"designations"}},{"name":"M:Blueshirt.Core.Crm.DesignationsDialog.SplitDesignations(TechTalk.SpecFlow.Table,System.Boolean)","summary":"\r\n            Set the designations grid rows starting with the first row and distribute the amount evenly\r\n            if specified.\r\n            ","param":[{"_":"Table where each TableRow corresponds to a grid row's values.\r\n            A TableRow is a mapping of the column captions to a single row's desired values","name":"designations"},{"_":"Flag indicating whether to split the designations evenly","name":"evenly"}]},{"name":"T:Blueshirt.Core.Crm.EventDialog","summary":"\r\n            Class to handle the interactions for adding/editing an event dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.EventDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"F:Blueshirt.Core.Crm.EventDialog.SupportedFields","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"M:Blueshirt.Core.Crm.EventDialog.SetFields(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Set the fields to their desired values.\r\n            ","param":{"_":"Mapping of the field captions to their desired values.","name":"fields"}},{"name":"T:Blueshirt.Core.Crm.PledgeDialog","summary":"\r\n            Class to handle the interactions for adding/editing pledge dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.PledgeDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"F:Blueshirt.Core.Crm.PledgeDialog.SupportedFields","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"M:Blueshirt.Core.Crm.PledgeDialog.SplitDesignationsEvenly(TechTalk.SpecFlow.Table)","summary":"\r\n            Split pledge evenly among the provided designations.\r\n            ","param":{"_":"Table where each row represents a designation to add.  \r\n            A row is a mapping of the 'Split designations' grid's column captions to the row's values.","name":"designations"}},{"name":"M:Blueshirt.Core.Crm.PledgeDialog.SetAccountSystem(System.String)","summary":"\r\n            Set the account system of the pledge.\r\n            ","param":{"_":"The account system to use.","name":"system"}},{"name":"M:Blueshirt.Core.Crm.PledgeDialog.EditInstallmentDesignations","summary":"\r\n            Click the 'Edit installment designations' button and load the associated dialog.\r\n            "},{"name":"M:Blueshirt.Core.Crm.PledgeDialog.SetFields(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Set the fields to their desired values\r\n            ","param":{"_":"Mapping of the field captions to their desired values.","name":"fieldValues"}},{"name":"M:Blueshirt.Core.Crm.PledgeDialog.SetFields(TechTalk.SpecFlow.TableRow,System.Collections.Generic.IDictionary{System.String,Blueshirt.Core.Base.CrmField})","summary":"\r\n            Set the fields to their desired values\r\n            ","param":[{"_":"Mapping of the field captions to their desired values","name":"fieldValues"},{"_":"Mapping of field captions to to a CrmField oject encapsulating\r\n            all relevant variables.  Field in the supportedFields mapping can be overridden by including them in this mapping.","name":"customSupportedFields"}]},{"name":"T:Blueshirt.Core.Crm.Dialogs.AddMembershipProgramDialog","summary":"\r\n            Class to handle the unique fields and actions for filling out an 'Add Membership Program' dialog.\r\n            "},{"name":"T:Blueshirt.Core.Crm.BatchDialog","summary":"\r\n            Base class to handle the interactions for adding/editing a batch dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.BatchDialog.getXBatchGridHeaders","summary":"\r\n            Unique XPath to get the header columns TR element of a batch's grid.\r\n            "},{"name":"F:Blueshirt.Core.Crm.BatchDialog.ColumnToBatchColumn","summary":"\r\n            Maps batch grid column captions to their required values in order to set their values in rows.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BatchDialog.GetColumnIndexByCaption(System.String)","summary":"\r\n            Get the index of the column in the batch grid.\r\n            ","param":{"_":"The caption of the column.","name":"caption"},"returns":"The index of the TD column element within the TR headers."},{"name":"M:Blueshirt.Core.Crm.BatchDialog.GetColumnIndexById(System.String)","summary":"\r\n            Get the index of the column in the batch grid.\r\n            ","param":{"_":"The unique id of the column.","name":"columnId"},"returns":"The index of the TD column element within the TR headers."},{"name":"M:Blueshirt.Core.Crm.BatchDialog.GetGridCellValue(System.String,System.Int32)","summary":"\r\n            Get the value of a batch grid cell.\r\n            ","param":[{"_":"The column caption of the cell.","name":"caption"},{"_":"The row index of the cell.  The first row is index 1.","name":"row"}],"returns":"The value of the cell."},{"name":"M:Blueshirt.Core.Crm.BatchDialog.SetGridCell(System.String,System.String,System.Int32)","summary":"\r\n            Set the value of a batch grid cell for a specified row.\r\n            ","param":[{"_":"The caption of the column.","name":"caption"},{"_":"The desired value of the row.","name":"value"},{"_":"The index of the row.  The first row's index is 1.","name":"row"}]},{"name":"M:Blueshirt.Core.Crm.BatchDialog.SetGridRows(TechTalk.SpecFlow.Table)","summary":"\r\n            Set the rows of a batch grid starting with the first row.\r\n            ","param":{"_":"Table where each TableRow represents a grid row to set.\r\n            A TableRow is a mapping of the batch column captions to a single row's desired values.","name":"batchRows"}},{"name":"M:Blueshirt.Core.Crm.BatchDialog.SetGridRow(TechTalk.SpecFlow.TableRow,System.Int32)","summary":"\r\n            Set the row of a batch grid.\r\n            ","param":[{"_":"Mapping of the batch column captions to a single row's desired values.","name":"batchRow"},{"_":"The index of the row.  The first row starts at index 1.","name":"row"}]},{"name":"M:Blueshirt.Core.Crm.BatchDialog.Validate","summary":"\r\n            Click the 'Validate' button and click Ok on the confirmation button.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BatchDialog.SaveAndClose","summary":"\r\n            Click the 'Save and close' button.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BatchDialog.EditConstituent(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Edit the constituent for the currently selected batch row.\r\n            ","param":{"_":"Mapping of the field captions to their desired values.","name":"fieldValues"}},{"name":"T:Blueshirt.Core.Crm.EnhancedRevenueBatchDialog","summary":"\r\n            Class to handle the interactions for adding/editing an enhanced revenue batch dialog.\r\n            "},{"name":"M:Blueshirt.Core.Crm.EnhancedRevenueBatchDialog.UpdateProjectedTotals","summary":"\r\n            Click the 'Update projected totals' and click Ok on the confirmation button.\r\n            "},{"name":"M:Blueshirt.Core.Crm.EnhancedRevenueBatchDialog.SplitDesignations(TechTalk.SpecFlow.Table,System.Boolean)","summary":"\r\n            Click the 'Split designations' button and set the desgination grid's rows.  This will\r\n            split the designation on the currently selected grid row.  The amount between the designations\r\n            will be split evenly.\r\n            ","param":[{"_":"Table where each row represents a designation to add.\r\n            Each row is a mapping of the column captions to the single row's desired values.","name":"designations"},{"_":"Flag indicating whether or not to split the designations evenly.","name":"evenly"}]},{"name":"M:Blueshirt.Core.Crm.EnhancedRevenueBatchDialog.Apply(TechTalk.SpecFlow.Table)","summary":"\r\n            Click 'Apply' under the Revenue tab and set the designations in the 'Apply to commitments' dialog.\r\n            ","param":{"_":"Table where each row represents an application to add.\r\n            A row is a mapping of the column captions to a single row's desired values.","name":"applications"}},{"name":"T:Blueshirt.Core.Crm.IndividualDialog","summary":"\r\n            Class to handle the interactions for adding/editing an individual dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.IndividualDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"F:Blueshirt.Core.Crm.IndividualDialog.SupportedFields","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"M:Blueshirt.Core.Crm.IndividualDialog.SetHouseholdFields(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Set the fields on the 'Household' tab.\r\n            ","param":{"_":"Mapping of the field captions to their desired values.  \r\n            Empty strings will be considered values and set the field to a blank value.  Null values will be skipped.","name":"fieldValues"}},{"name":"M:Blueshirt.Core.Crm.IndividualDialog.SetIndividualFields(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Set the fields on the 'Individual' tab.\r\n            ","param":{"_":"Mapping of the field captions to their desired values.  \r\n            Empty strings will be considered values and set the field to a blank value.  Null values will be skipped.","name":"fieldValues"}},{"name":"M:Blueshirt.Core.Crm.IndividualDialog.SetIndividualFields(TechTalk.SpecFlow.TableRow,System.Collections.Generic.IDictionary{System.String,Blueshirt.Core.Base.CrmField})","summary":"\r\n            Set the fields on the 'Individual' tab.\r\n            ","param":[{"_":"Mapping of the field captions to their desired values.  \r\n            Empty strings will be considered values and set the field to a blank value.  Null values will be skipped.","name":"fieldValues"},{"_":"Mapping of field captions to a CrmField oject encapsulating\r\n            all relevant variables.  Field in the default SupportedFields mapping can be overridden by including them in this mapping.","name":"CustomSupportedFields"}]},{"name":"M:Blueshirt.Core.Crm.IndividualDialog.SetLastName(System.String)","summary":"\r\n            Set the 'Last name' field.\r\n            ","param":{"_":"The desired value of the field.","name":"lastName"}},{"name":"M:Blueshirt.Core.Crm.IndividualDialog.Save","summary":"\r\n            Save the dialog.\r\n            "},{"name":"T:Blueshirt.Core.Crm.MarketingAcknowledgementRuleDialog","summary":"\r\n            Class to handle the interactions for adding/editing a marketing acknowledgement template rule dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.MarketingAcknowledgementRuleDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"F:Blueshirt.Core.Crm.MarketingAcknowledgementRuleDialog.SupportedFields","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"M:Blueshirt.Core.Crm.MarketingAcknowledgementRuleDialog.SetDetailsTabFields(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Set the fields on the 'Details' tab of the dialog.\r\n            ","param":{"_":"Mapping of the field captions to their desired values.","name":"fields"}},{"name":"M:Blueshirt.Core.Crm.MarketingAcknowledgementRuleDialog.Save(System.Int32)","summary":"\r\n            Save the dialog and click 'Yes' on the subsequent confirmation dialogs.\r\n            ","param":{"_":"The number of expected confirmation dialogs to accept.","name":"numOfApprovedChanges"}},{"name":"T:Blueshirt.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog","summary":"\r\n            Class to handle the interactions for adding/editing a marketing acknowledgement template dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog.SupportedFields","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"M:Blueshirt.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog.SetGeneralTabFields(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Set the fields on the 'General' tab.\r\n            ","param":{"_":"Mapping of the field captions to their desired values.","name":"fields"}},{"name":"M:Blueshirt.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog.SetSourceCode(System.String)","summary":"\r\n            Set the 'Source code' field on the 'Source Code' tab.\r\n            ","param":{"_":"The desired value of the field.","name":"sourceCode"}},{"name":"M:Blueshirt.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog.IncludeAllRecords","summary":"\r\n            Select the 'Include all records' box on the 'Universe' tab.\r\n            "},{"name":"M:Blueshirt.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog.SetActivationTabFields(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Set the fields on the 'Activation' tab.\r\n            ","param":{"_":"Mapping of the field captions to their desired values.","name":"fields"}},{"name":"T:Blueshirt.Core.Crm.NewAdhocQueryDialog","summary":"\r\n            Add Ad-hoc Query Dialog functions and interactions in BBCRM.\r\n            "},{"name":"M:Blueshirt.Core.Crm.NewAdhocQueryDialog.getXSaveOptionsInput(System.String)","summary":"\r\n            Get an XPath for an input field on a NewAdhocQueryDialog.\r\n            ","param":{"_":"The Id of the input field.","name":"inputId"}},{"name":"M:Blueshirt.Core.Crm.NewAdhocQueryDialog.getXSaveOptionsTextArea(System.String)","summary":"\r\n            Get an XPath for a TextArea on a NewAdhocQueryDialog.\r\n            ","param":{"_":"The id of the TextArea.","name":"AreaId"}},{"name":"F:Blueshirt.Core.Crm.NewAdhocQueryDialog.getXFindField","summary":"\r\n            Constant XPath for the 'Find' Field of an NewAdhocQueryDialog.\r\n            "},{"name":"M:Blueshirt.Core.Crm.NewAdhocQueryDialog.getXFieldResult(System.String)","summary":"\r\n            Get an XPath for a result field on a NewAdhocQueryDialog.\r\n             ","param":{"_":"The text of the Result Field.","name":"text"}},{"name":"M:Blueshirt.Core.Crm.NewAdhocQueryDialog.getXCriteriaInput(System.String)","summary":"\r\n            Format a unique XPath for a Input on an AdHocQueryCriteriaForm on the NewAdhocQueryDialog.\r\n            ","param":{"_":"The ID of the input.","name":"inputId"}},{"name":"F:Blueshirt.Core.Crm.NewAdhocQueryDialog.getXAddFilterArrow","summary":"\r\n            Constant XPath for the Add Filter Arrow on a NewAdhocQueryDialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.NewAdhocQueryDialog.getXAddOutputFieldArrow","summary":"\r\n            Constant XPath for the Add Filter Arrow on a NewAdhocQueryDialog.\r\n            "},{"name":"M:Blueshirt.Core.Crm.NewAdhocQueryDialog.getXTab(System.String)","summary":"\r\n            Format a unique XPath for a tab on the Ad-Hoc Query Dialog.\r\n            ","param":{"_":"The caption of the tab.","name":"tabCaption"}},{"name":"M:Blueshirt.Core.Crm.NewAdhocQueryDialog.SetSaveOptions(TechTalk.SpecFlow.Table)","summary":"\r\n            Set the values on the 'Set save options' tab\r\n            ","param":{"_":"Dictionary mapping of the field captions to their desired values","name":"options"}},{"name":"T:Blueshirt.Core.Crm.PackageDialog","summary":"\r\n            Class to handle the interactions for adding/editing a package dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.PackageDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"F:Blueshirt.Core.Crm.PackageDialog.SupportedFields","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"M:Blueshirt.Core.Crm.PackageDialog.SetFields(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Set the field values.\r\n            ","param":{"_":"Mapping of the field captions to their desired values.","name":"fields"}},{"name":"T:Blueshirt.Core.Crm.PaymentDialog","summary":"\r\n            Class to handle the interactions for adding/editing a payment dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.PaymentDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"F:Blueshirt.Core.Crm.PaymentDialog.SupportedFields","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"F:Blueshirt.Core.Crm.PaymentDialog.ApplicationToAddButtonId","summary":"\r\n            Mapping of the 'Application' dropdown options to their 'Add' button id.\r\n            "},{"name":"M:Blueshirt.Core.Crm.PaymentDialog.SetFields(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Set the fields to their desired values.\r\n            ","param":{"_":"Mapping of the field captions to their desired values.","name":"fields"}},{"name":"M:Blueshirt.Core.Crm.PaymentDialog.AddApplication(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Add an application to the payment.\r\n            ","param":{"_":"Mapping of the field captions to their desired values in the various application types.","name":"application"}},{"name":"T:Blueshirt.Core.Crm.MajorGivingPlanDialog","summary":"\r\n            Class to handle the interactions for adding/editing a major giving plan dialog\r\n            "},{"name":"F:Blueshirt.Core.Crm.MajorGivingPlanDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"F:Blueshirt.Core.Crm.MajorGivingPlanDialog.SupportedFields","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"M:Blueshirt.Core.Crm.MajorGivingPlanDialog.SetPlanStartDate(System.String)","summary":"\r\n            Set the 'Start date' of the plan.\r\n            ","param":{"_":"The date to set the 'Start date' to.","name":"startDate"}},{"name":"M:Blueshirt.Core.Crm.MajorGivingPlanDialog.SetPrimaryManagerStartDate(System.String)","summary":"\r\n            Set the 'Start date' of the primary manager.\r\n            ","param":{"_":"The date to set the 'Start date' to.","name":"startDate"}},{"name":"M:Blueshirt.Core.Crm.MajorGivingPlanDialog.SetSecondaryManagerStartDate(System.String)","summary":"\r\n            Set the 'Start date' of the secondary manager.\r\n            ","param":{"_":"The date to set the 'Start date' to.","name":"startDate"}},{"name":"M:Blueshirt.Core.Crm.MajorGivingPlanDialog.SetDetails(TechTalk.SpecFlow.TableRow)","summary":"\r\n            The fields on the Details tab of the dialog.\r\n            ","param":{"_":"Mapping of the field captions to their desired values.","name":"details"}},{"name":"M:Blueshirt.Core.Crm.MajorGivingPlanDialog.SetParticipants(TechTalk.SpecFlow.Table)","summary":"\r\n            Set the participants grid values.\r\n            Starts with the first row.\r\n            ","param":{"_":"Table where each row represents a participant to add.\r\n            A row is a mapping of the column captions to a single row's values.","name":"participants"}},{"name":"M:Blueshirt.Core.Crm.MajorGivingPlanDialog.SetOutline(System.String)","summary":"\r\n            Set the plan outline.\r\n            ","param":{"_":"The type of outline to use.","name":"outline"}},{"name":"M:Blueshirt.Core.Crm.MajorGivingPlanDialog.SelectStepRow(System.Int32)","summary":"\r\n            Select a row in the Steps grid.\r\n            ","param":{"_":"The index of the row to select.  The first row's index is 1.","name":"index"}},{"name":"M:Blueshirt.Core.Crm.MajorGivingPlanDialog.SetStepRow(TechTalk.SpecFlow.TableRow,System.Int32)","summary":"\r\n            Set a step row's values.\r\n            ","param":[{"_":"Mapping of the column captions to a single row's values.","name":"step"},{"_":"The index of the row.  The first row's index is 1.","name":"index"}]},{"name":"M:Blueshirt.Core.Crm.MajorGivingPlanDialog.InsertStep(TechTalk.SpecFlow.TableRow,System.Int32)","summary":"\r\n            Select a row and insert a new step above it.\r\n            ","param":[{"_":"Mapping of the column captions to a single row's values.","name":"step"},{"_":"The index of the row to select before inserting.  The first row's index is 1.","name":"index"}]},{"name":"M:Blueshirt.Core.Crm.MajorGivingPlanDialog.Save","summary":"\r\n            Save the dialog.\r\n            "},{"name":"M:Blueshirt.Core.Crm.MajorGivingPlanDialog.SetAddProspectPlanStartDate(System.String,System.String)","summary":"\r\n            Set the 'Start date' of the 'Add prospect plan' dialog.  For whatever reason this requires custom logic\r\n            from the default SetField.  Tab over or clicking on the input does NOT change its class to contain the\r\n            focused attribute value.  This means it just continues trying to click the field and never sending it a value.\r\n            \r\n            If you unfocus from the web browser to another application at any point in this attempt, the field magically starts \r\n            to work and the focus attribute does get added from a click.  I believe this is an underlying product bug that is only\r\n            discoverable through automation via a selenium change of field focus.  Stepping through the default setfield implementation. \r\n            causes it to work.  Manually executing the steps shows all the expected element attribute changes when inspecting the field.\r\n            ","param":[{"_":"The XPath to find an element for setting the value to.","name":"xPath"},{"_":"The desired value of the element.","name":"value"}]},{"name":"T:Blueshirt.Core.Crm.QuerySourceViewDialog","summary":"\r\n            Base object for QuerySourceViewDialog functionality and interactions in BBCRM.  Inherits the Dialog base class.\r\n            "},{"name":"F:Blueshirt.Core.Crm.QuerySourceViewDialog.getXRecordTypeField","summary":"\r\n            Constant XPath for the Record Field of a QuerySourceViewDialog.\r\n            "},{"name":"M:Blueshirt.Core.Crm.QuerySourceViewDialog.getXRecordTypeNameColumn(System.String)","summary":"\r\n            Returns an XPath for the Name column of a QuerySourceViewDialog.\r\n            \r\n            ","param":{"_":"The Name of the Column.","name":"name"}},{"name":"M:Blueshirt.Core.Crm.QuerySourceViewDialog.SetRecordType(System.String)","summary":"\r\n            Set the record Type on a QuerySourceViewDialog.\r\n            ","param":{"_":"The type to select.","name":"type"}},{"name":"M:Blueshirt.Core.Crm.QuerySourceViewDialog.SelectRecordTypeName(System.String)","summary":"\r\n            Select the record Type on a QuerySourceViewDialog\r\n            ","param":{"_":"The type to be selected.","name":"type"}},{"name":"T:Blueshirt.Core.Crm.RegistrantDialog","summary":"\r\n            Class to handle the interactions for adding/editing an event registrant dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.RegistrantDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"F:Blueshirt.Core.Crm.RegistrantDialog.SupportedFields","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"M:Blueshirt.Core.Crm.RegistrantDialog.SetRegistrant(System.String)","summary":"\r\n            Set the registrant.\r\n            ","param":{"name":"registrant"}},{"name":"M:Blueshirt.Core.Crm.RegistrantDialog.SetRegistrants(TechTalk.SpecFlow.Table)","summary":"\r\n            Set the registrants and registration options in the registration grid.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"registrants"}},{"name":"T:Blueshirt.Core.Crm.SegmentDialog","summary":"\r\n            Class to handle the interactions for adding/editing a segment dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.SegmentDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"F:Blueshirt.Core.Crm.SegmentDialog.SupportedFields","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"M:Blueshirt.Core.Crm.SegmentDialog.SetDetailsFields(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Set the fields on the 'Details' tab.\r\n            ","param":{"_":"Mapping of the field captions to their desired values.","name":"fields"}},{"name":"M:Blueshirt.Core.Crm.SegmentDialog.AddSelection(System.String)","summary":"\r\n            Add a marketing selection to the segment.\r\n            ","param":{"_":"The selection to add.","name":"selection"}},{"name":"T:Blueshirt.Core.Crm.SearchDialog","summary":"\r\n            Base class to handle the interactions for search dialogs.  Inherits the Dialog base class.\r\n            "},{"name":"F:Blueshirt.Core.Crm.SearchDialog.getXFirstNameField","summary":"\r\n            Returns an Xpath for the FirstName Field on a SerachDialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.SearchDialog.getXResultsBar","summary":"\r\n            Returns an Xpath for the Results Tool bar on a SerachDialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.SearchDialog.getXLastNameField","summary":"\r\n            Returns an Xpath for the LastName Field on a SerachDialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.SearchDialog.getXGridNameField","summary":"\r\n            Returns an Xpath for the Grid Name Field on a SerachDialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.SearchDialog.getXSelectedResultsRow","summary":"\r\n            ConstantXPath value for finding a search dialog's selected row in the results pane.\r\n            "},{"name":"F:Blueshirt.Core.Crm.SearchDialog.getXNoRecordsFound","summary":"\r\n            Constant XPath value for checking if no search results were found on a search dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.SearchDialog.getXSearchButton","summary":"\r\n            Constant XPath value for finding a Search button WebElement.\r\n            "},{"name":"F:Blueshirt.Core.Crm.SearchDialog.getXSelectButton","summary":"\r\n            Constant XPath value for finding a Select button WebElement.\r\n            "},{"name":"F:Blueshirt.Core.Crm.SearchDialog.getXSearchResultsGrid","summary":"\r\n            Returns an Xpath for the Search Results Grid on a SerachDialog.\r\n            "},{"name":"M:Blueshirt.Core.Crm.SearchDialog.Search","summary":"\r\n            Press search on the SearchDialog.\r\n            "},{"name":"M:Blueshirt.Core.Crm.SearchDialog.Select","summary":"\r\n            Click the 'Select' button\r\n            "},{"name":"M:Blueshirt.Core.Crm.SearchDialog.CheckConstituentSearchResultsToolbarContains(System.String)","summary":"\r\n            Checks that the search results tool bar message contains the specified string on a SearchDialog.\r\n            Throws an exception on failure.\r\n            \r\n            ","param":{"_":"The string to check for.","name":"expected"}},{"name":"M:Blueshirt.Core.Crm.SearchDialog.SetFirstNameToSearch(System.String)","summary":"\r\n            Sets the value of the First Name search field.\r\n            ","param":{"_":"The text to set.","name":"name"}},{"name":"M:Blueshirt.Core.Crm.SearchDialog.SetLastNameToSearch(System.String)","summary":"\r\n            Sets the value of the Last Name search field.\r\n            ","param":{"_":"The text to set.","name":"name"}},{"name":"M:Blueshirt.Core.Crm.SearchDialog.SelectFirstResult","summary":"\r\n            Select the first result returned.\r\n            If no results are returned, Cancel is clicked and an Exception is thrown.\r\n            "},{"name":"M:Blueshirt.Core.Crm.SearchDialog.CheckConstituentSearchResultsContain(System.String)","summary":"\r\n            Checks that the search results contain the specified string on a SearchDialog.\r\n            Throws an exception on failure.\r\n            \r\n            ","param":{"_":"The string to check for.","name":"expected"}},{"name":"T:Blueshirt.Core.Crm.AdHocQueryDialog","summary":"\r\n            Class to handle the interactions for adding/editing an ad-hoc query dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.AdHocQueryDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"F:Blueshirt.Core.Crm.AdHocQueryDialog.SupportedFields","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"M:Blueshirt.Core.Crm.AdHocQueryDialog.ExpandNode(System.String)","summary":"\r\n            Expand a tree node if it is collapsed.\r\n            "},{"name":"M:Blueshirt.Core.Crm.AdHocQueryDialog.FilterBy(System.String)","summary":"\r\n            Select a filter category in the 'Browse for fields in' panel\r\n            ","param":{"_":"The complete filter path.  Nested filters should be provided as a complete\r\n            path (i.e. 'Revenue\\Constituent\\Spouse'","name":"filter"}},{"name":"M:Blueshirt.Core.Crm.AdHocQueryDialog.ApplyCriteria(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Set the fields on the apply criteria dialog that appears when adding a filter field.\r\n            ","param":{"_":"Mapping of the unique field ids to their desired values.","name":"criteria"}},{"name":"M:Blueshirt.Core.Crm.AdHocQueryDialog.AddFilterField(System.String,TechTalk.SpecFlow.TableRow)","summary":"\r\n            Select a field and add it as a filter field uing the provided criteria.\r\n            ","param":[{"_":"The field to add.","name":"fieldCaption"},{"_":"Mapping of the unique field ids to their desired values for the criteria dialog.","name":"criteria"}]},{"name":"M:Blueshirt.Core.Crm.AdHocQueryDialog.AddOutputField(System.String)","summary":"\r\n            Select a field and add it as an output field to display.\r\n            ","param":{"_":"The field to add.","name":"fieldCaption"}},{"name":"M:Blueshirt.Core.Crm.AdHocQueryDialog.SetSaveOptions(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Set the values on the 'Set save options' tab\r\n            ","param":{"_":"Dictionary mapping of the field captions to their desired values","name":"options"}},{"name":"M:Blueshirt.Core.Crm.AdHocQueryDialog.SaveAndClose","summary":"\r\n            Click the 'Save and close' button\r\n            "},{"name":"T:Blueshirt.Core.Crm.MultiLevelEventDialog","summary":"\r\n            Class to handle the interactions for adding/editing an add a multi-level event dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.MultiLevelEventDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"M:Blueshirt.Core.Crm.MultiLevelEventDialog.getXAddedEvent(System.String)","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"M:Blueshirt.Core.Crm.MultiLevelEventDialog.SetTemplate(System.String)","summary":"\r\n            Set the 'Event management template' dropdown.\r\n            ","param":{"_":"The name of the template to set.","name":"templateName"}},{"name":"M:Blueshirt.Core.Crm.MultiLevelEventDialog.AddExistingEvent(System.String)","summary":"\r\n            Add an event to the multi-level event.  If an event if currently selected in\r\n            the hierachy, then the new event will be added a child to the selected event.\r\n            ","param":{"_":"The name of the event to add.","name":"eventName"}},{"name":"M:Blueshirt.Core.Crm.MultiLevelEventDialog.AddChildEvent(System.String,System.String)","summary":"\r\n            Add an event to the multi-level event as a child to a specified event\r\n            already added to the multi-level event.\r\n            ","param":[{"_":"The name of the event to add.","name":"eventName"},{"_":"The name of the parent event.","name":"parentEventName"}]},{"name":"M:Blueshirt.Core.Crm.MultiLevelEventDialog.CopyFrom(System.String,System.String,System.String)","summary":"\r\n            Select a parent event to add a new child event to.  The child event will be copied from an existing event.\r\n            ","param":[{"_":"The name of the event to copy.","name":"copyFromEventName"},{"_":"The name of the parent event to add the new event as a child to.","name":"parentEventName"},{"_":"The name to set for the new event.","name":"newEventName"}]},{"name":"T:Blueshirt.Core.Crm.TaskDialog","summary":"\r\n            Class to handle the interactions for adding/editing a task dialog.\r\n            "},{"name":"F:Blueshirt.Core.Crm.TaskDialog.DialogIds","summary":"\r\n            Static list of supported unique dialog id.\r\n            "},{"name":"F:Blueshirt.Core.Crm.TaskDialog.SupportedFields","summary":"\r\n            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"F:Blueshirt.Core.Crm.TaskDialog.SupportedRemindersGridFields","summary":"\r\n            Static mapping of supported Grid column captions to CrmField objects encapsulating all relevant variables\r\n            needed to set the field's value.\r\n            "},{"name":"M:Blueshirt.Core.Crm.TaskDialog.SetFields(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Set the fields to their desired values.\r\n            ","param":{"_":"Mapping of the field captions to their desired values.","name":"fields"}},{"name":"M:Blueshirt.Core.Crm.TaskDialog.SetReminders(TechTalk.SpecFlow.Table)","summary":"\r\n            Set the reminders or the task.  Always starts at the first row, replacing whatever\r\n            existing rows might exist.\r\n            ","param":{"_":"Table where each row represents a reminder to add.  \r\n            A row is a mapping of the 'Reminders' grid's column captions to the row's values.  ","name":"reminders"}},{"name":"T:Blueshirt.Core.Crm.AnalysisFunctionalArea","summary":"\r\n            Class to handle interactions for the 'Analysis' functional area.\r\n            "},{"name":"T:Blueshirt.Core.Crm.FunctionalArea","summary":"\r\n            Utility methods for operations on a functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.FunctionalArea.getXFaLink(System.String)","summary":"\r\n            Returns an Xpath for a Functional Area link.\r\n            ","param":{"_":"The Link text to use.","name":"linkText"},"returns":""},{"name":"M:Blueshirt.Core.Crm.FunctionalArea.getXAddMenu(System.String,System.String)","summary":"\r\n            Formats an XPath to handle an Add menu.  \r\n            ","param":[{"_":"The unique ID in the HTML Table element's id. i.e. 'ADDNEWGROUP'","name":"addId"},{"_":"The caption of the add menu.  Defaults to 'Add new'","name":"caption"}]},{"name":"M:Blueshirt.Core.Crm.FunctionalArea.getXFunctionalAreaTask(System.String,System.String)","summary":"\r\n            Formats the unique XPath for finding a task on a functional area page\r\n            using the grouping caption and task caption.\r\n            ","param":[{"_":"The caption of the Grouping header that the task belongs to.","name":"groupCaption"},{"_":"The name of the task to interact with.","name":"taskName"}]},{"name":"M:Blueshirt.Core.Crm.FunctionalArea.getXFunctionalAreaTask(System.String)","summary":"\r\n            Formats an XPath for finding a task on a functional area page\r\n            using the task link's caption.\r\n            ","param":{"_":"The name/caption of the task.","name":"taskName"}},{"name":"M:Blueshirt.Core.Crm.FunctionalArea.OpenLink(System.String)","summary":"\r\n            Click on the functional area link.\r\n            ","param":{"_":"The caption of the task link.","name":"caption"}},{"name":"M:Blueshirt.Core.Crm.FunctionalArea.OpenLink(System.String,System.String)","summary":"\r\n            Click on the functional area link.\r\n            ","param":[{"_":"The group header caption of the task.","name":"groupCaption"},{"_":"The caption of the task link.","name":"linkCaption"}]},{"name":"M:Blueshirt.Core.Crm.AnalysisFunctionalArea.OpenQueryPanel","summary":"\r\n            TODO - THIS IS A CUSTOMIZATION IMPLEMENTATION FOR BHF AND SHOULD BE MOVED TO THEIR TEST SOLUTION\r\n            "},{"name":"M:Blueshirt.Core.Crm.AnalysisFunctionalArea.InformationLibrary(System.String,System.String)","summary":"\r\n            Navigate to the 'Information Library' Panel\r\n            ","param":[{"_":"The group header caption of the task.  Defaults to \"Information library\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Information library\".","name":"taskCaption"}]},{"name":"T:Blueshirt.Core.Crm.ConstituentsFunctionalArea","summary":"\r\n            Class to handle interactions for the 'Constituents' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.ConstituentsFunctionalArea.ConstituentExists(System.String,System.String,System.String,System.String,System.String)","summary":"\r\n            Determine if at least a single matching constituent can be found based on the provided\r\n            search field value and select it.  Selects the first returned result, or cancels the search \r\n            dialog if no results are found.\r\n            ","param":[{"_":"The desired value of the search criteria field.","name":"fieldValue"},{"_":"The group header caption of the task.  Defaults to \"Constituents\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Constituent search\".","name":"taskCaption"},{"_":"The unique id of the search dialog.  i.e. 'UniversityofOxfordConstituentSearch'  \r\n            Defaults to \"ConstituentSearchbyNameorLookupID\".","name":"dialogId"},{"_":"The unique id of the search dialog field.  i.e. 'LOOKUPID'  Defaults to \"KEYNAME\".","name":"fieldId"}],"returns":"True if at least one matching element is found, false otherwise."},{"name":"M:Blueshirt.Core.Crm.ConstituentsFunctionalArea.AddAnIndividual(System.String,System.String)","summary":"\r\n            Open the dialog to add an individual.\r\n            ","param":[{"_":"The group header caption of the task.  Defaults to \"Individuals and households\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Add an individual\".","name":"taskCaption"}]},{"name":"M:Blueshirt.Core.Crm.ConstituentsFunctionalArea.AddAnIndividual(TechTalk.SpecFlow.TableRow,System.String,System.String)","summary":"\r\n            Open the dialog to add an individual, set the fields to the provided values, and save.\r\n            ","param":[{"_":"Mapping of the 'Add an individual' dialog's field captions to their desired values.","name":"individual"},{"_":"The group header caption of the task.  Defaults to \"Individuals and households\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Add an individual\".","name":"taskCaption"}]},{"name":"M:Blueshirt.Core.Crm.ConstituentsFunctionalArea.ConstituentSearch(System.String,System.String,System.String,System.String,System.String)","summary":"\r\n            Search for a constituent and navigate to the first returned result.  An Exception is thrown if\r\n            no results are found.\r\n            ","param":[{"_":"The desired value of the search criteria field.","name":"fieldValue"},{"_":"The group header caption of the task.  Defaults to \"Constituents\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Constituent search\".","name":"taskCaption"},{"_":"The unique id of the search dialog.  i.e. 'UniversityofOxfordConstituentSearch'  \r\n            Defaults to \"ConstituentSearchbyNameorLookupID\".","name":"dialogId"},{"_":"The unique id of the search dialog field.  i.e. 'LOOKUPID'  Defaults to \"KEYNAME\".","name":"fieldId"}]},{"name":"T:Blueshirt.Core.Crm.EventsFunctionalArea","summary":"\r\n            Class to handle interactions for the 'Events' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.EventsFunctionalArea.AddEvent","summary":"\r\n            Open the dialog to add an event.\r\n            "},{"name":"M:Blueshirt.Core.Crm.EventsFunctionalArea.AddEvent(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Open the dialog to add an event, set the fields to their desired values, and save.\r\n            ","param":{"_":"Dictionary mapping field caption keys to their values.","name":"eventValue"}},{"name":"M:Blueshirt.Core.Crm.EventsFunctionalArea.AddMultiEvent","summary":"\r\n            Open the dialog for adding a 'Multi-level event'.\r\n            "},{"name":"M:Blueshirt.Core.Crm.EventsFunctionalArea.EventSearch(System.String,System.String,System.String,System.String,System.String)","summary":"\r\n            Search for an event and select the first matching record.\r\n            ","param":[{"_":"The desired value of the search criteria field.","name":"fieldValue"},{"_":"The group header caption of the task.  Defaults to \"Fundraising events\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Event search\".","name":"taskCaption"},{"_":"The unique id of the search dialog.  i.e. 'UniversityofOxfordConstituentSearch'  \r\n            Defaults to \"EventSearch\".","name":"dialogId"},{"_":"The unique id of the search dialog field.  i.e. 'LOOKUPID'  Defaults to \"NAME\".","name":"fieldId"}]},{"name":"M:Blueshirt.Core.Crm.EventsFunctionalArea.Locations(System.String,System.String)","summary":"\r\n            Navigate to the 'Locations' panel.\r\n            ","param":[{"_":"The group header caption of the task.  Defaults to \"Fundraising events\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Locations\".","name":"taskCaption"}]},{"name":"M:Blueshirt.Core.Crm.EventsFunctionalArea.EventManagementTemplates(System.String,System.String)","summary":"\r\n            Navigate to the 'Event Management Templates' panel.\r\n            ","param":[{"_":"The group header caption of the task.  Defaults to \"Fundraising events\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Event management templates\".","name":"taskCaption"}]},{"name":"M:Blueshirt.Core.Crm.EventsFunctionalArea.CollapseCalendar","summary":"\r\n            Collapse the Event Calendar if it is expanded and wait for the collapse to complete.\r\n            "},{"name":"T:Blueshirt.Core.Crm.FundraisingFunctionalArea","summary":"\r\n            Class to handle interactions for the 'Fundraising' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.FundraisingFunctionalArea.DesignationExists(System.String,System.String,System.String,System.String,System.String)","summary":"\r\n            Check if a designation exists and navigate to it if so.\r\n            ","param":[{"_":"The name of the designation.","name":"designation"},{"_":"The group header caption of the task.  Defaults to \"Fundraising\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Designation search\"","name":"taskCaption"},{"_":"The unique id of the search dialog.  i.e. 'UniversityofOxfordConstituentSearch'  \r\n            Defaults to \"DesignationSearch\".","name":"dialogId"},{"_":"The unique id of the search dialog field.  i.e. 'LOOKUPID'  Defaults to \"COMBINEDSEARCH\".","name":"fieldId"}],"returns":"True if the designation exists, false otherwise."},{"name":"T:Blueshirt.Core.Crm.HomeFunctionalArea","summary":"\r\n             Class to handle interactions for the 'Home' functional area.\r\n            "},{"name":"T:Blueshirt.Core.Crm.MarketingAndCommFunctionalArea","summary":"\r\n             Class to handle interactions for the 'Marketing and Communications' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.MarketingAndCommFunctionalArea.Receipts(System.String,System.String)","summary":"\r\n            Navigate to the 'Receipts' panel.\r\n            ","param":[{"_":"The group header caption of the task.  Defaults to \"Donor relations\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Receipts\"","name":"taskCaption"}]},{"name":"M:Blueshirt.Core.Crm.MarketingAndCommFunctionalArea.MarketingAcknowledgements(System.String,System.String)","summary":"\r\n            Navigate to the 'Marketing Acknowledgements' panel.\r\n            ","param":[{"_":"The group header caption of the task.  Defaults to \"Marketing efforts\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Marketing acknowledgements\"","name":"taskCaption"}]},{"name":"M:Blueshirt.Core.Crm.MarketingAndCommFunctionalArea.Segments(System.String,System.String)","summary":"\r\n            Navigate to the 'Segments' panel.\r\n            ","param":[{"_":"The group header caption of the task.  Defaults to \"Acquisition and segmentation\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Segments\"","name":"taskCaption"}]},{"name":"M:Blueshirt.Core.Crm.MarketingAndCommFunctionalArea.Packages(System.String,System.String)","summary":"\r\n            Navigate to the 'Packages' panel and then navigate to the 'View packages' panel.\r\n            ","param":[{"_":"The group header caption of the task.  Defaults to \"Packages\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Packages\"","name":"taskCaption"}]},{"name":"T:Blueshirt.Core.Crm.ProspectsFunctionalArea","summary":"\r\n            Class to handle interactions for the 'Prospects' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.ProspectsFunctionalArea.MajorGivingSetup(System.String,System.String)","summary":"\r\n            Navigate to the 'Major Giving Setup' panel.\r\n            ","param":[{"_":"The group header caption of the task.  Defaults to \"Configuration\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Major giving setup\".","name":"taskCaption"}]},{"name":"M:Blueshirt.Core.Crm.ProspectsFunctionalArea.CollapseResearchLists","summary":"\r\n            Collapse the Research Lists Calendar if it is expanded and wait for the collapse to complete.\r\n            "},{"name":"T:Blueshirt.Core.Crm.RevenueFunctionalArea","summary":"\r\n            Class to handle interactions for the 'Revenue' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.RevenueFunctionalArea.AddAPayment(System.String,System.String)","summary":"\r\n            Open the dialog to add a payment.\r\n            ","param":[{"_":"The group header caption of the task.  Defaults to \"Transactions\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Add a payment\".","name":"taskCaption"}]},{"name":"M:Blueshirt.Core.Crm.RevenueFunctionalArea.AddAPledge(System.String,System.String)","summary":"\r\n            Open the dialog to add a pledge.\r\n            ","param":[{"_":"The group header caption of the task.  Defaults to \"Transactions\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Add a pledge\".","name":"taskCaption"}]},{"name":"M:Blueshirt.Core.Crm.RevenueFunctionalArea.AddAPledge(TechTalk.SpecFlow.TableRow,System.String,System.String)","summary":"\r\n            Open the dialog to add a pledge, set its values, and save.\r\n            ","param":[{"_":"Mapping of the 'Add a pledge' dialog's field captions to their desired values.","name":"pledge"},{"_":"The group header caption of the task.  Defaults to \"Transactions\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Add a pledge\".","name":"taskCaption"}]},{"name":"M:Blueshirt.Core.Crm.RevenueFunctionalArea.BatchEntry(System.String,System.String)","summary":"\r\n            Navigate to the 'Batch Entry' panel\r\n            ","param":[{"_":"The group header caption of the task.  Defaults to \"Transactions\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Batch entry\".","name":"taskCaption"}]},{"name":"M:Blueshirt.Core.Crm.RevenueFunctionalArea.PledgeSubtypes(System.String,System.String)","summary":"\r\n            Navigate to the 'Pledge Subtypes' panel\r\n            ","param":[{"_":"The group header caption of the task.  Defaults to \"Configuration\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Pledge subtypes\".","name":"taskCaption"}]},{"name":"M:Blueshirt.Core.Crm.RevenueFunctionalArea.TransactionSearchByConstituent(System.String,System.String,System.String)","summary":"\r\n            Search for a revenue record by all records associated with a constituent\r\n            and select the first returned result.\r\n            ","param":[{"_":"The last name of the constituent.","name":"constituent"},{"_":"The group header caption of the task.  Defaults to \"Transactions\".","name":"groupCaption"},{"_":"The link caption of the task.  Defaults to \"Transaction search\".","name":"taskCaption"}]},{"name":"T:Blueshirt.Core.Crm.AdHocQueryPanel","summary":"\r\n            Class to handle interactions for the 'Ad-hoc Query' panel.\r\n            "},{"name":"T:Blueshirt.Core.Crm.Panel","summary":"\r\n            Base class to handle interactions for panels.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Panel.getXTabsBarRightScroller","summary":"\r\n            Constant XPath for getting the right scroller on the top Tab bar.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Panel.getXTabsBar","summary":"\r\n            Constant XPath for getting an element that indicates the top Tab bar has loaded an active Tab.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Panel.getXTabsBarActiveTab","summary":"\r\n            Constant XPath for getting an element corresponds to the currently active Tab in the top Tab bar.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Panel.getXInnerTabsBar","summary":"\r\n            Constant XPath for getting an element that indicates an inner Tab bar has loaded an active Tab.\r\n            "},{"name":"M:Blueshirt.Core.Crm.Panel.getXSpan(System.String,System.String)","summary":"\r\n            Given the unique HTML element ids of a dialog and span, return a unique identifier XPath\r\n            to find the SPAN field.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. '_EventSummaryViewForm3'","name":"dialogId"},{"_":"The SPAN element's unique id identifier - i.e. '_LOCATION_value'","name":"spanId"}]},{"name":"M:Blueshirt.Core.Crm.Panel.getXDiv(System.String,System.String)","summary":"\r\n            Given the unique HTML element ids of a dialog and div, return a unique identifier XPath\r\n            to find the DIV field.\r\n            ","param":[{"_":"The dialog's unique id identifier - i.e. '_individualSpouseBusinessAddForm'","name":"dialogId"},{"_":"The DIV element's unique id identifier - i.e. '_LASTNAME_value'","name":"divId"}]},{"name":"M:Blueshirt.Core.Crm.Panel.getXSectionDatalistPageIndexButtons(System.String)","summary":"\r\n            Format an XPath to find all top-right indexing buttons for a section's datalist.\r\n            ","param":{"_":"The caption of the section.","name":"sectionCaption"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXSectionDatalistCurrentPageIndex(System.String)","summary":"\r\n            Format an XPath to find the top-right index DIV whose text will be the current page index of a section's datalist.\r\n            ","param":{"_":"The caption of the section","name":"sectionCaption"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXSelectedDatalistRowButton(System.String)","summary":"\r\n            Format an XPath for handling a button on the selected datalist row.\r\n            ","param":{"_":"The caption of the button.","name":"caption"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXSelectedDatalistRowLinkByAction(System.String)","summary":"\r\n            Format an XPath for handling a link on the selected datalist row.\r\n            ","param":{"_":"The tooltip caption of the action displayed when hovering over the link. i.e. 'Go to plan:'","name":"action"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXDatalistRowLinkByActionAndCaption(System.String,System.String)","summary":"\r\n            Format an xPath for handling a link on any datalist row.\r\n            ","param":[{"_":"The result of the action. i.e. 'Go to segment:'","name":"action"},{"_":"The caption of the link.","name":"caption"}]},{"name":"M:Blueshirt.Core.Crm.Panel.getXSelectedDatalistRowLinkById(System.String)","summary":"\r\n            Format an XPath for handling a link on the selected datalist row.\r\n            ","param":{"_":"The id of the link that is the value of the 'data-fieldid' attribute.  i.e. 'PLANNAME'","name":"id"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXSelectedDatalistRowLinkByCaption(System.String)","summary":"\r\n            Format an XPath for handling a link on the selected datalist row.\r\n            ","param":{"_":"The caption text of the link.","name":"caption"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXPanelHeaderLink(System.String)","summary":"\r\n            Format an XPath for finding a link based on its caption located in the header of a panel.\r\n            ","param":{"name":"linkCaption"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXPanelHeaderLink","summary":"\r\n            Format an XPath for finding a context link located in the header of a panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.Panel.getXPanelHeader(System.String)","summary":"\r\n            Formatter for an XPath to find a panel header with a specific image type.\r\n            ","param":{"_":"Unique name of the image associated with the panel header.","name":"imageName"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXPanelHeader","summary":"\r\n            Generic XPath to get the panel header.\r\n            "},{"name":"M:Blueshirt.Core.Crm.Panel.getXPanelHeaderByText(System.String)","summary":"\r\n            Format an XPath to find a panel header containing the provided text.\r\n            ","param":{"_":"The value to check for in the panel header.","name":"text"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXDataListColumnValue(System.Int32,System.String)","summary":"\r\n            Given the DOM index of a datalist column and the value for that column, return an XPath\r\n            to append to a datalist XPath for finding that value in the requested column index.\r\n            \r\n            No element will be found if the value does not exist in this column.\r\n            ","param":[{"_":"The DOM index for the TD element representing the desired column.","name":"columnIndex"},{"_":"The value corresponding the provided column.  ","name":"columnValue"}]},{"name":"M:Blueshirt.Core.Crm.Panel.getXSectionDatalistRows(System.String)","summary":"\r\n            XPath to get the TR datalist rows of a section.\r\n            ","param":{"_":"The caption of the section that the datalist belongs to.","name":"sectionCaption"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXSectionDatalistRow(System.String,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,System.String})","summary":"\r\n            Formats a unique XPath to find a single datalist row.\r\n            ","param":[{"_":"The caption of the section that the datalist belongs to.","name":"sectionCaption"},{"_":"Mapping of the datalist column captions to their DOM TD index.","name":"columnCaptionToIndex"},{"_":"Mapping of the datalist column captions to their values in a single row.","name":"columnCaptionToValue"}]},{"name":"M:Blueshirt.Core.Crm.Panel.getXViewForm(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})","summary":"\r\n            Format an XPath to find a single view form in a section.\r\n            \r\n            Field values will be checked to CONTAIN (not match) the provided values.\r\n            ","param":[{"_":"The caption of the section that the view form belongs to.","name":"sectionCaption"},{"_":"The unique id for the type of view form to look for.  i.e. 'RevenueTransactionDetailViewForm'","name":"viewFormId"},{"_":"Mapping of a single view form's captions (excluding the colon) to their desired value.\r\n            Field values will be checked to CONTAIN (not match) the provided values.","name":"viewFormValues"}]},{"name":"M:Blueshirt.Core.Crm.Panel.getXSectionViewFormSpan(System.String,System.String)","summary":"\r\n            Format an XPath to append to a section view form that has an item with the provided\r\n            caption and CONTAINING (not matching) the value.\r\n            \r\n            No element will be found if the caption does not exist with this value.\r\n            ","param":[{"_":"The caption of the view form field.","name":"caption"},{"_":"The expected value associated with the provided caption.","name":"value"}]},{"name":"M:Blueshirt.Core.Crm.Panel.getXSectionViewForm(System.String,System.String)","summary":"\r\n            Format an XPath for a section's view form root.\r\n            ","param":[{"_":"The caption of the section.","name":"secionCaption"},{"_":"The unique id for the type of view form to look for.  i.e. 'RevenueTransactionDetailViewForm'","name":"viewFormId"}]},{"name":"M:Blueshirt.Core.Crm.Panel.getXSectionDatalistColumnHeaders(System.String)","summary":"\r\n            XPath to get the TR row of column headers for a section's datalist.\r\n            ","param":{"_":"The caption of the section that the datalist belongs to.","name":"sectionCaption"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXDuplicateSectionDatalistColumnHeaders(System.String)","summary":"\r\n            XPath to get the TR row of column headers for a section's datalist when multiple sections with matching\r\n            captions exists for a single panel on different tabs.\r\n            ","param":{"_":"The caption of the section that the datalist belongs to.","name":"sectionCaption"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXSectionAddButton(System.String,System.String)","summary":"\r\n            Given the caption header of a section, formats an XPath for handling the Add\r\n            button.\r\n            ","param":[{"_":"The caption head of the section.","name":"sectionName"},{"_":"The caption of the button defaulting to \"Add\".  \r\n            A unique caption value can be specified if the button caption is not \"Add\".","name":"addCaption"}],"returns":""},{"name":"M:Blueshirt.Core.Crm.Panel.getXSection(System.String)","summary":"\r\n            Given the caption header of a section, return a unique identifier XPath\r\n            for handling the section WebElement.\r\n            ","param":{"_":"The caption header of the section to reference","name":"sectionName"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXTab(System.String)","summary":"\r\n            Formats an XPath for a Tab in a top Tab bar.\r\n            ","param":{"_":"The caption of the tab.","name":"caption"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXInnerTab(System.String)","summary":"\r\n            Formats an XPath for a Tab in an inner Tab bar.\r\n            ","param":{"_":"The caption of the tab.","name":"caption"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXSectionExpandButton(System.String)","summary":"\r\n            Formats an XPath to get the expand/collpase button of a section\r\n            ","param":{"_":"The caption of the section.","name":"sectionCaption"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXSectionWidget(System.String,System.String)","summary":"\r\n            Returns an XPath to get the DIV parent of the Research Lists UI widget whose 'stlye' attribute contains visibility info about the widget.\r\n            ","param":[{"_":"The caption of the section.","name":"sectionCaption"},{"_":"A unique part of the widget element's id in the DOM.  i.e. 'ResearchGroupNavigationViewDataForm'","name":"widgetId"}]},{"name":"M:Blueshirt.Core.Crm.Panel.CollapseSection(System.String,System.String)","summary":"\r\n            Collapse a section if it is expanded and a collapse/expand button exists.\r\n            ","param":[{"_":"The caption of the section","name":"sectionCaption"},{"_":"A unique part of the widget element's id in the DOM.  i.e. 'ResearchGroupNavigationViewDataForm'","name":"widgetId"}]},{"name":"M:Blueshirt.Core.Crm.Panel.SelectSectionDatalistRow(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.Generic.IDictionary{System.String,System.Int32})","summary":"\r\n            Select a row in a section's datalist.  \r\n            If the row is already selected, no action is taken.\r\n            ","param":[{"_":"Mapping of the column caption to the single row's values.","name":"rowValues"},{"_":"The caption of the section.","name":"sectionCaption"},{"_":"Mapping of the column captions to their TD index.","name":"columnCaptionToIndex"}]},{"name":"M:Blueshirt.Core.Crm.Panel.SelectSectionDatalistRow(TechTalk.SpecFlow.TableRow,System.String,System.Collections.Generic.IDictionary{System.String,System.Int32})","summary":"\r\n            Select a row in a section's datalist.  \r\n            If the row is already selected, no action is taken.\r\n            ","param":[{"_":"Mapping of the column caption to the single row's values.","name":"rowValues"},{"_":"The caption of the section.","name":"sectionCaption"},{"_":"Mapping of the column captions to their TD index.","name":"columnCaptionToIndex"}]},{"name":"M:Blueshirt.Core.Crm.Panel.SelectSectionDatalistRow(System.Collections.Generic.IDictionary{System.String,System.String},System.String)","summary":"\r\n            Select a row in a section's datalist.  If the row is already selected, no action is taken.\r\n            ","param":[{"_":"Dictionary mapping of the column caption to the single row's values.   Keys represent column captions.","name":"rowValues"},{"_":"The caption of the section.","name":"sectionCaption"}]},{"name":"M:Blueshirt.Core.Crm.Panel.SelectSectionDatalistRow(TechTalk.SpecFlow.TableRow,System.String)","summary":"\r\n            Select a row in a section's datalist.  If the row is already selected, no action is taken.\r\n            ","param":[{"_":"Mapping of the column caption to the single row's values.","name":"row"},{"_":"The caption of the section.","name":"sectionCaption"}]},{"name":"M:Blueshirt.Core.Crm.Panel.SelectDuplicateSectionDatalistRow(System.Collections.Generic.IDictionary{System.String,System.String},System.String)","summary":"\r\n            Select a row in a section's datalist.  If the row is already selected, no action is taken.\r\n            Use this when the same panel has tabs with the same section caption.\r\n            ","param":[{"_":"Dictionary mapping of the column caption to the single row's values.   Keys represent column captions.","name":"rowValues"},{"_":"The caption of the section.","name":"sectionCaption"}]},{"name":"M:Blueshirt.Core.Crm.Panel.SelectDuplicateSectionDatalistRow(TechTalk.SpecFlow.TableRow,System.String)","summary":"\r\n            Select a row in a section's datalist.  If the row is already selected, no action is taken.\r\n            Use this when the same panel has tabs with the same section caption.\r\n            ","param":[{"_":"Mapping of the column caption to the single row's values.","name":"row"},{"_":"The caption of the section.","name":"sectionCaption"}]},{"name":"M:Blueshirt.Core.Crm.Panel.SectionDatalistRowExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String)","summary":"\r\n            Check whether a row exists in a section's datalist.\r\n            ","param":[{"_":"Dictionary mapping the datalist columns to a single row's values.  Keys represent column captions.","name":"rowValues"},{"_":"The caption of the section.","name":"sectionCaption"}],"returns":"True if the row exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.Panel.SectionDatalistRowExists(TechTalk.SpecFlow.TableRow,System.String)","summary":"\r\n            Check whether a row exists in a section's datalist.\r\n            ","param":[{"_":"Mapping of the datalist columns to a single row's values.","name":"row"},{"_":"The caption of the section.","name":"sectionCaption"}],"returns":"True if the row exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.Panel.SectionDatalistRowExists(TechTalk.SpecFlow.TableRow,System.String,System.Collections.Generic.IDictionary{System.String,System.Int32})","summary":"\r\n            Check whether a row exists in a section's datalist.\r\n            ","param":[{"_":"Mapping of the datalist columns to a single row's values.","name":"row"},{"_":"The caption of the section.","name":"sectionCaption"},{"_":"Mapping of the column captions to their TD index.","name":"columnCaptionToIndex"}],"returns":"True if the row exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.Panel.SectionDatalistRowExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.Generic.IDictionary{System.String,System.Int32})","summary":"\r\n            Check whether a row exists in a section's datalist.\r\n            ","param":[{"_":"Dictionary mapping the datalist columns to a single row's values.  Keys represent column captions.","name":"rowValues"},{"_":"The caption of the section.","name":"sectionCaption"},{"_":"Mapping of the column captions to their TD index.","name":"columnCaptionToIndex"}],"returns":"True if the row exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.Panel.SectionViewFormExists(TechTalk.SpecFlow.TableRow,System.String,System.String)","summary":"\r\n            Check whether a view form exists in a section CONTAINING (not identically matching) the provided values.\r\n            ","param":[{"_":"Mapping of the view form captions (excluding the colon) to a single view form's values.","name":"viewForm"},{"_":"The caption of the section.","name":"sectionCaption"},{"_":"The unique id for the type of view form to look for.  i.e. 'RevenueTransactionDetailViewForm'","name":"viewFormId"}],"returns":"True if the view form exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.Panel.SectionViewFormExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)","summary":"\r\n            Check whether a view form exists in a section CONTAINING (not identically matching) the provided values.\r\n            ","param":[{"_":"Mapping of the view form captions (excluding the colon) to a single view form's values.","name":"viewForm"},{"_":"The caption of the section.","name":"sectionCaption"},{"_":"The unique id for the type of view form to look for.  i.e. 'RevenueTransactionDetailViewForm'","name":"viewFormId"}],"returns":"True if the view form exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.Panel.GridRowExists(TechTalk.SpecFlow.TableRow,System.String)","summary":"\r\n            Check if a grid/datalist row exists.\r\n            ","param":[{"_":"Mapping of the grid/datalist column captions to a single row's values.","name":"row"},{"_":"The unique id of the grid/datalist.  i.e. '_DESIGNATIONS_value'","name":"gridId"}],"returns":"True if the row exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.Panel.GridRowExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String)","summary":"\r\n            Check if a grid/datalist row exists.\r\n            ","param":[{"_":"Dictionary mapping the grid/datalist columns to a single row's values.  Keys represent column captions.","name":"row"},{"_":"The unique id of the grid/datalist.  i.e. '_DESIGNATIONS_value'","name":"gridId"}],"returns":"True if the row exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.Panel.getXGridRow(System.String,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,System.String})","summary":"\r\n            Formats an XPath to find a single row in a grid/datalist.\r\n            ","param":[{"_":"The unique id of the grid/datalist.  i.e. '_DESIGNATIONS_value'","name":"gridId"},{"_":"Mapping of the column captions to their index in the TD.","name":"columnCaptionToIndex"},{"_":"Mapping of the column captions to a single row's values.","name":"columnCaptionToValue"}]},{"name":"M:Blueshirt.Core.Crm.Panel.getXGridRows(System.String)","summary":"\r\n            Format an XPath to find the TR rows of a grid/datalist.\r\n            ","param":{"_":"The unique id of the grid/datalist.  i.e. '_DESIGNATIONS_value'","name":"gridId"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXGridHeaders(System.String)","summary":"\r\n            Format an XPath to find the TR header row of a grid/datalist that contains the column captions.\r\n            ","param":{"_":"The unique id of the grid/datalist.  i.e. '_DESIGNATIONS_value'","name":"gridId"}},{"name":"M:Blueshirt.Core.Crm.Panel.getXGrid(System.String)","summary":"\r\n            Format an XPath to find a grid/datalist.\r\n            ","param":{"_":"The unique id of the grid/datalist.  i.e. '_DESIGNATIONS_value'","name":"gridId"}},{"name":"M:Blueshirt.Core.Crm.Panel.SelectTab(System.String)","summary":"\r\n            Select a Tab from the top Tab bar.\r\n            ","param":{"_":"The caption of the tab.","name":"caption"}},{"name":"M:Blueshirt.Core.Crm.Panel.SelectInnerTab(System.String)","summary":"\r\n            Select a Tab from an inner Tab bar.\r\n            ","param":{"_":"The caption of the tab.","name":"caption"}},{"name":"M:Blueshirt.Core.Crm.Panel.ClickSectionAddButton(System.String,System.String)","summary":"\r\n            Click the 'Add' button of a section.\r\n            ","param":[{"_":"The caption of the section that the button belongs to.","name":"sectionCaption"},{"_":"The caption of the button to click.  Defaults to 'Add'.","name":"addButtonCaption"}]},{"name":"M:Blueshirt.Core.Crm.Panel.IsPanelHeader(System.String)","summary":"\r\n            Check if the panel header's text matches the expected value.\r\n            ","param":{"_":"The expected value of the header.","name":"expectedValue"},"returns":"True if the text of the header matches the provided expected value, false otherwise."},{"name":"M:Blueshirt.Core.Crm.Panel.IsPanelType(System.String)","summary":"\r\n            Check if the panel header's image contains the provided image type.\r\n            ","param":{"_":"The unique image name of the panel.  i.e. 'individual.png'","name":"panelImage"},"returns":"True if the panel header image contains the provided image type, false otherwise."},{"name":"M:Blueshirt.Core.Crm.Panel.WaitForPanelType(System.String)","summary":"\r\n            Wait until the panel header's image contains the provided image type.\r\n            A WebDriverTimeoutException is thrown is no displayed panel header loads with the image.\r\n            ","param":{"_":"The unique image name of the panel.  i.e. 'individual.png'","name":"panelImage"}},{"name":"M:Blueshirt.Core.Crm.Panel.WaitForPanelHeaderNotContain(System.String)","summary":"\r\n            Wait the default time for the panel header to not contain the provided value.\r\n            ","param":{"_":"The value to wait until not displayed in the header.","name":"header"}},{"name":"M:Blueshirt.Core.Crm.Panel.ExpandRow(System.String)","summary":"\r\n            Expand a row if it is not already expanded.\r\n            "},{"name":"M:Blueshirt.Core.Crm.Panel.AdditionalDatalistPagesExist(System.String)","summary":"\r\n            Check if additional pages exist for a datalist to load.  If so load the page.\r\n            ","returns":"Returns true if an additional page was found and clicked, false otherwise."},{"name":"M:Blueshirt.Core.Crm.AdHocQueryPanel.IsPanelHeader(System.String)","summary":"\r\n            Check if the Ad-Hoc Query Panel has the provided name in the header.\r\n            ","param":{"_":"The value to check for in the header.","name":"queryName"},"returns":"True if the header contains the value, false otherwise."},{"name":"T:Blueshirt.Core.Crm.BatchEntryPanel","summary":"\r\n            Class to handle interactions for the 'Batch Entry' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BatchEntryPanel.AddBatch(System.String)","summary":"\r\n            Create a new batch using the specified template and load the batch dialog.\r\n            ","param":{"_":"The template to use for the new batch.","name":"batchTemplate"}},{"_":"\r\n            \r\n            \r\n            /// \r\n        ","name":"M:Blueshirt.Core.Crm.BatchEntryPanel.AddBatch(System.String,System.String)","summary":"\r\n            Create a new batch with the specified template and description.\r\n            ","param":[{"_":"The template to use for the new batch.","name":"batchTemplate"},{"_":"The description to use for the new batch.","name":"description"}]},{"name":"M:Blueshirt.Core.Crm.BatchEntryPanel.UncommittedBatchExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a batch exists as a row in the uncommitted batches datalist.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"batch"},"returns":"True if the batch exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.BatchEntryPanel.SelectUncommittedBatch(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Select an uncommitted batch.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"batchRow"}},{"name":"M:Blueshirt.Core.Crm.BatchEntryPanel.CommitSelectedBatch","summary":"\r\n            Commit the currently selected batch.\r\n            "},{"name":"T:Blueshirt.Core.Crm.BusinessProcess","summary":"\r\n            Base class to handle interactions for the 'Business Process' panel.\r\n            "},{"name":"F:Blueshirt.Core.Crm.BusinessProcess.getXCommitStatus","summary":"\r\n            Get a formatted xPath for an element whose text represents the commit status of the business process.\r\n            "},{"name":"F:Blueshirt.Core.Crm.BusinessProcess.getXRecordsProcessed","summary":"\r\n            Get a formatted xPath for an element whose test represents the number of records processed for the business process.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BusinessProcess.IsCompleted","summary":"\r\n            Wait for the business process to complete and check if the status finished as 'Completed'.\r\n            ","returns":"True if the business process completes without errors or exceptions, false otherwise."},{"name":"M:Blueshirt.Core.Crm.BusinessProcess.IsNumRecordsProcessed(System.Int32)","summary":"\r\n            Check for the total number of records processed.\r\n            ","param":{"_":"The expected number of total records processed by the business process.","name":"numRecords"},"returns":"True if the posted number of total processed records equals the provided expected amount, false otherwise."},{"name":"T:Blueshirt.Core.Crm.MarketingAcknowledgementBusinessProcess","summary":"\r\n            Class to handle interactions for the 'Marketing Acknowledgement Business Process' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.MarketingAcknowledgementBusinessProcess.IsNumRecordsProcessed(System.Int32)","summary":"\r\n            Check for the number of records successfully processed.\r\n            ","param":{"_":"The number of records to check for.","name":"numRecords"},"returns":"True if the provided number matches the listed amount of successfully processed records, false otherwise."},{"name":"M:Blueshirt.Core.Crm.MarketingAcknowledgementBusinessProcess.IsCompleted","summary":"\r\n            Wait for the the business process to finish and validate if it finished with a \"Completed\" status.\r\n            ","returns":"True if the process completed without errors or exceptions, false otherwise."},{"name":"T:Blueshirt.Core.Crm.ReceiptBusinessProcess","summary":"\r\n            Class to handle interactions for the 'Receipt Business Process' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.ReceiptBusinessProcess.IsCompleted","summary":"\r\n            Wait for the the business process to finish and validate if it finished with a \"Completed\" status.\r\n            ","returns":"True if the process completed without errors or exceptions, false otherwise."},{"name":"T:Blueshirt.Core.Crm.ConstituentPanel","summary":"\r\n            Class to handle interactions for the 'Constituent' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.getXNotification(System.String)","summary":"\r\n            XPath to find a notification on a Constituent panel.\r\n            ","param":{"_":"Part of the title that the notification must have.","name":"noteTitle"}},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.IsTitle(System.String)","summary":"\r\n            Check the Title of the constituent.\r\n            ","param":{"_":"The Title value to check for.","name":"title"},"returns":"True if the provided value is the constituent's Title, false otherwise."},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.IsStateAddress(System.String)","summary":"\r\n            Check the State address of the constituent.\r\n            ","param":{"_":"The State abbreviation to check for.","name":"state"},"returns":"True if the provided value is the constituent's state, false otherwise."},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.IsBirthDate(System.String)","summary":"\r\n            Check the Birth Date of the constituent.\r\n            ","param":{"_":"The birth date value to check for.","name":"birthDate"},"returns":"True if the provided value is the constituent's birth date, false otherwise."},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.IsLastName(System.String)","summary":"\r\n            Checks if the constituent record panel has the provided last name.\r\n            ","param":{"_":"The last name to check for.","name":"lastName"},"returns":"True if the constituent has the provided last name, false otherwise."},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.IsConstituentPanelHeader(System.String)","summary":"\r\n            Check if the Constituent panel header has the expected text.\r\n            ","param":{"_":"The expected text of the header to check for.","name":"expectedText"},"returns":"True if the header has the expected text, false otherwise."},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.ConstituencyExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a constituency exists on the 'Personal Info' => 'Constituencies' tab.\r\n            ","param":{"_":"Mapping of column captions to a row's values.","name":"values"},"returns":"True if the constituency exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.AddConstituency(System.String,TechTalk.SpecFlow.TableRow)","summary":"\r\n            Add a constituency under the 'Personal Info' => 'Constituencies' tab.\r\n            ","param":[{"_":"The type of constituency to add (i.e. 'Staff')","name":"constituency"},{"_":"Mapping of the field captions and desired values to set on the 'Add constituency' dialog.  \r\n            Defaults to null where no values are set.","name":"values"}]},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.AddNote(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Add a Note in the 'Documentation and Interactions' => 'Constituent Documentation' tab\r\n            ","param":{"_":"Mapping of the field captions for the 'Add a note' dialog to their desired values.","name":"note"}},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.SelectNote(System.String)","summary":"\r\n            Select a Note.\r\n            ","param":{"_":"The value of the 'Title' column for the desired row.","name":"noteTitle"}},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.AddNotification(System.String,TechTalk.SpecFlow.TableRow)","summary":"\r\n            Add a Notification to the specified Note in the 'Documentation and Interactions' => 'Constituent Documentation' tab.\r\n            ","param":[{"_":"The 'Title' of the Note to add a notification to.","name":"noteTitle"},{"_":"Mapping of the field captions for the 'Add notification' dialog to their desired values.","name":"notification"}]},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.NotificationExists(System.String)","summary":"\r\n            Check if a Notification exists for the provided Note.\r\n            ","param":{"_":"The 'Title' of the Note.","name":"noteTitle"},"returns":"True if the notification exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.TeamRoleExists(System.String)","summary":"\r\n            Check if a Team Member Role exists when adding a Prospect team member through the\r\n            'Add a prospect team member' dialog.\r\n            ","param":{"_":"The name of the team role to check for.","name":"teamRole"},"returns":"True if the team role exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.AddTeamRole(System.String)","summary":"\r\n            Add Team Member Role through the 'Add a prospect team member' dialog.\r\n            ","param":{"_":"The name of the team role to add.","name":"teamRole"}},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.AddTeamMember(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Add a prospect team member from the 'Prospect' => 'Prospect Team' tab.\r\n            \r\n            Constituent may need to have the 'Prospect' constituency for this tab to be displayed.\r\n            ","param":{"_":"Mapping of the field captions for the 'Add a prospect team member' dialog to their desired values.","name":"teamMember"}},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.TeamMemberExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a prospect team member exists.\r\n            ","param":{"_":"Mapping of column captions to a row's values.","name":"teamMember"},"returns":"True if the team member exists, false otherwise"},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.AddMajorGivingPlan(TechTalk.SpecFlow.TableRow,System.String)","summary":"\r\n            Add a major giving plan to a prospect constituent.\r\n            ","param":[{"_":"Mapping of the 'Details' tab field captions to their desired values.","name":"detailFields"},{"_":"The outline to use.","name":"outline"}]},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.GoToPlan(System.String)","summary":"\r\n            Navigate the plan panel of an existing plan for the constituent.\r\n            ","param":{"_":"The name of the plan.","name":"planName"}},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.PlanExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a plan exists for the constituent.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"plan"},"returns":"True if the plan exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.ConstituentPanel.StartToAddAPlan(System.String)","summary":"\r\n            Start to add a plan to the prospect constituent.\r\n            ","param":{"_":"The caption of the add menu item for the type of plan to add.","name":"planType"}},{"name":"T:Blueshirt.Core.Crm.EventManagementTemplatesPanel","summary":"\r\n            Class to handle interactions for the 'Event Management Templates' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.EventManagementTemplatesPanel.TemplateExists(System.String)","summary":"\r\n            Check if an event management template exists.\r\n            ","param":{"_":"The name of the event management template.","name":"templateName"},"returns":"True if the template exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.EventManagementTemplatesPanel.AddTemplate(System.String)","summary":"\r\n            Add an event management template with a single level labeled 'Default'\r\n            ","param":{"_":"The name of the template to add.","name":"templateName"}},{"name":"T:Blueshirt.Core.Crm.EventPanel","summary":"\r\n            Class to handle interactions for the 'Event' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.EventPanel.AddCoordinator(System.String)","summary":"\r\n            Add a coordinator.\r\n            ","param":{"_":"The last name of the constituent to add as a coordinator.","name":"constituentLastName"}},{"name":"M:Blueshirt.Core.Crm.EventPanel.CoordinatorExists(System.String)","summary":"\r\n            Check if the event record panel has the provided coordinator listed.\r\n            ","param":{"_":"The name of coordinator.","name":"coordinatorName"},"returns":"True if the coordinator exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.EventPanel.IsEventName(System.String)","summary":"\r\n            Check if the event record panel has the provided name.\r\n            ","param":{"_":"The event name value to check for.","name":"eventName"},"returns":"True if the event has the provided name, false otherwise."},{"name":"M:Blueshirt.Core.Crm.EventPanel.IsStartDate(System.String)","summary":"\r\n            Check if the event record panel starts on the provided start date.\r\n            ","param":{"_":"The start date value to check for.","name":"startDate"},"returns":"True if the event starts on the start date, false otherwise."},{"name":"M:Blueshirt.Core.Crm.EventPanel.IsLocation(System.String)","summary":"\r\n            Check if the event record panel occurs at the provided location.\r\n            ","param":{"_":"The location to check for.","name":"location"},"returns":"True if the event occurs at the location, false otherwise"},{"name":"M:Blueshirt.Core.Crm.EventPanel.AddRegistrationOption(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Add a registration option.\r\n            ","param":{"_":"Mapping of field captions to their desired values.","name":"option"}},{"name":"M:Blueshirt.Core.Crm.EventPanel.RegistrationOptionExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a registration option exists.\r\n            ","param":{"_":"Mapping a column headers to a single row's values.","name":"option"},"returns":"True if the registration option exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.EventPanel.CopyRegistrationOptions(System.String)","summary":"\r\n            Copy the registration options from another existing event.\r\n            ","param":{"_":"The name of the event to copy the registration options from.","name":"copyFromEventName"}},{"name":"M:Blueshirt.Core.Crm.EventPanel.AddExpense(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Add an expense under the 'Expenses' tab.\r\n            ","param":{"_":"Mapping of the 'Add an expese' dialogs field captions to their desired values.","name":"expense"}},{"name":"M:Blueshirt.Core.Crm.EventPanel.ExpenseExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if an expense exists in the 'Expenses' tab.\r\n            ","param":{"_":"Mapping of the column captions to a row's values.","name":"expense"},"returns":"True if the expense exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.EventPanel.AddTaskDialog","summary":"\r\n            Initiate the dialog for adding a task on the 'Tasks/Coordinators' tab.\r\n            \r\n            Note: This is technically a different dialog than the dialog for editing a task.\r\n            "},{"name":"M:Blueshirt.Core.Crm.EventPanel.EditTask(System.String)","summary":"\r\n            Open the 'Edit task' dialog for task in the 'Tasks/Coordinators' tab.\r\n            \r\n            Note: This is technically a different dialog than the dialog for adding a task.\r\n            ","param":{"_":"The name of task to edit.","name":"taskName"}},{"name":"M:Blueshirt.Core.Crm.EventPanel.ReminderExists(System.String,System.String)","summary":"\r\n            Check if a reminder exists on task in the 'Tasks/Coordinators' tab.\r\n            ","param":[{"_":"The name of task to check for the reminder on.","name":"taskName"},{"_":"The complete title of the reminder to check for.","name":"reminderTitle"}],"returns":"True if the reminder exists on the task, false otherwise."},{"name":"M:Blueshirt.Core.Crm.EventPanel.SelectTask(System.String)","summary":"\r\n            Select a task.\r\n            ","param":{"_":"The row's value for the task under the 'Name' column.","name":"taskName"}},{"name":"M:Blueshirt.Core.Crm.EventPanel.AddPreference(System.String,TechTalk.SpecFlow.Table)","summary":"\r\n            Add a Preference to an Event under the 'Options' tab\r\n            ","param":[{"_":"The name of the preference to add.","name":"name"},{"_":"Table where each TableRow corresponds to a desired grid row's values in the 'Add a preference' dialog.","name":"preferences"}]},{"name":"M:Blueshirt.Core.Crm.EventPanel.PreferenceExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a preference exists under the 'Options' tab of the current Event Panel.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"preference"},"returns":"True if the preference exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.EventPanel.AddRegistrant","summary":"\r\n            Start to add a registrant by clicking the add button under the 'Registrations' tab.\r\n            "},{"name":"T:Blueshirt.Core.Crm.InformationLibraryPanel","summary":"\r\n            Class to handle interactions for the 'Information Library' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.InformationLibraryPanel.AddAdHocQuery(System.String)","summary":"\r\n            Load the dialog to add an Ad-Hoc Query and select the type of query to create.\r\n            ","param":{"_":"The type of query to add.","name":"type"}},{"name":"F:Blueshirt.Core.Crm.InformationLibraryPanel.getXFilterQueryField","summary":"\r\n            Return an Xpath for the Query Field on the InformationLibraryPanel.\r\n            "},{"name":"F:Blueshirt.Core.Crm.InformationLibraryPanel.getXDeleteQuery","summary":"\r\n            Returns an Xpath for the Delete Query menu item on a InformationLibraryPanel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.InformationLibraryPanel.getXQuery(System.String)","summary":"\r\n            Returns an Xpath for the highlighted Query search result.  \r\n            ","param":{"_":"The text of the result.","name":"text"},"returns":""},{"name":"M:Blueshirt.Core.Crm.InformationLibraryPanel.CopyQueryAsStaticSelection(System.String,System.Collections.Generic.IDictionary{System.String,System.String})","summary":"\r\n            Create a copy of an existing query as a static selection.\r\n            ","param":[{"_":"The name to give to the new static selection.","name":"selection"},{"_":"The query to create a copy off.  Mapping of the column captions to a single row's values.","name":"query"}]},{"name":"M:Blueshirt.Core.Crm.InformationLibraryPanel.QueryExists(System.Collections.Generic.IDictionary{System.String,System.String})","summary":"\r\n            Check if a query exists.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"query"},"returns":"True if the query exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.InformationLibraryPanel.QueryExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a query exists.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"query"},"returns":"True if the query exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.InformationLibraryPanel.DeleteQuery(System.Collections.Generic.IDictionary{System.String,System.String})","summary":"\r\n            Delete a query.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"query"}},{"name":"M:Blueshirt.Core.Crm.InformationLibraryPanel.DeleteQuery(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Delete a query.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"query"}},{"name":"M:Blueshirt.Core.Crm.InformationLibraryPanel.SelectSectionDatalistRow(TechTalk.SpecFlow.TableRow,System.String)","summary":"\r\n            Select a datalist row for a section.\r\n            ","param":[{"_":"Mapping of the column captions to a single row's values.","name":"row"},{"_":"The caption of the section.","name":"sectionCaption"}]},{"name":"M:Blueshirt.Core.Crm.InformationLibraryPanel.SelectSectionDatalistRow(System.Collections.Generic.IDictionary{System.String,System.String},System.String)","summary":"\r\n            Select a datalist row for a section.\r\n            ","param":[{"_":"Mapping of the column captions to a single row's values.","name":"rowValues"},{"_":"The caption of the section.","name":"sectionCaption"}]},{"name":"M:Blueshirt.Core.Crm.InformationLibraryPanel.SectionDatalistRowExists(TechTalk.SpecFlow.TableRow,System.String)","summary":"\r\n            Check if a datalist row exists.\r\n            ","param":[{"_":"Mapping of the column captions to a single row's values.","name":"row"},{"_":"The caption of the section.","name":"sectionCaption"}],"returns":"True if the row exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.InformationLibraryPanel.SectionDatalistRowExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String)","summary":"\r\n            Check if a datalist row exists.\r\n            ","param":[{"_":"Mapping of the column captions to a single row's values.","name":"rowValues"},{"_":"The caption of the section.","name":"sectionCaption"}],"returns":"True if the row exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.InformationLibraryPanel.getXSectionDatalistRow(System.String,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,System.String})","summary":"\r\n            Formats a unique xPath to find a single datalist row.\r\n            ","param":[{"_":"The caption of the section that the datalist belongs to.","name":"sectionCaption"},{"_":"Mapping of the datalist column captions to their DOM TD index.","name":"columnCaptionToIndex"},{"_":"Mapping of the datalist column captions to their values in a single row.","name":"columnCaptionToValue"}]},{"name":"M:Blueshirt.Core.Crm.InformationLibraryPanel.getXDataListColumnValue(System.Int32,System.String)","summary":"\r\n            Given the DOM index of a datalist column and the value for that column, return an XPath\r\n            to append to a datalist XPath for finding that value in the requested column index.\r\n            \r\n            No element will be found if the value does not exist in this column.\r\n            ","param":[{"_":"The DOM index for the TD element representing the desired column.","name":"columnIndex"},{"_":"The value corresponding the provided column.  ","name":"columnValue"}]},{"name":"T:Blueshirt.Core.Crm.LocationsPanel","summary":"\r\n            Class to handle interactions for the 'Locations' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.LocationsPanel.LocationExists(System.String)","summary":"\r\n            Checks if a location exists.\r\n            ","param":{"_":"The name of the location.","name":"locationName"},"returns":"True if the location exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.LocationsPanel.LocationExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Checks if a location exists.\r\n            ","param":{"_":"Mapping of the column captions to the desired location's values.","name":"location"},"returns":"True if the location exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.LocationsPanel.AddLocation(System.String)","summary":"\r\n            Add an event location.\r\n            ","param":{"_":"The name of the location.","name":"locationName"}},{"name":"T:Blueshirt.Core.Crm.MajorGivingSetupPanel","summary":"\r\n            Class to handle interactions for the 'Major Giving Setup' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.MajorGivingSetupPanel.AddPlanOutline(System.String,TechTalk.SpecFlow.Table)","summary":"\r\n            Add a major giving plan outline.\r\n            ","param":[{"_":"The name of the plan outline.","name":"planName"},{"_":"Table where each row represents a step to add.  Row keys correspond to the column captions.","name":"steps"}]},{"name":"M:Blueshirt.Core.Crm.MajorGivingSetupPanel.PlanOutlineExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a major giving plan outline exists\r\n            ","param":{"_":"Mapping of field caption keys to their values.","name":"plan"},"returns":"True if the plan exists, false otherwise."},{"name":"T:Blueshirt.Core.Crm.MarketingAcknowledgementsPanel","summary":"\r\n            Class to handle interactions for the 'Marketing Acknowledgements' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.MarketingAcknowledgementsPanel.AddTemplate","summary":"\r\n            Start to add a new marketing acknowledgement template.\r\n            "},{"name":"M:Blueshirt.Core.Crm.MarketingAcknowledgementsPanel.TemplateExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a marketing acknowledgement template exists.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"template"},"returns":"True if the template exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.MarketingAcknowledgementsPanel.DeleteTemplate(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Delete a marketing acknowledgement template.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"template"}},{"name":"T:Blueshirt.Core.Crm.MarketingAcknowledgementTemplatePanel","summary":"\r\n            Class to handle interactions for the 'Marketing Acknowledgement Template' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.MarketingAcknowledgementTemplatePanel.AddAcknowledgementRule","summary":"\r\n            Start to add an acknowledgement rule to the template.\r\n            "},{"name":"M:Blueshirt.Core.Crm.MarketingAcknowledgementTemplatePanel.ProcessAcknowledgement","summary":"\r\n            Start the process for the current acknowledgement template.\r\n            "},{"name":"T:Blueshirt.Core.Crm.MultiEventPanel","summary":"\r\n            Class to handle interactions for the 'Multi-Event' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.MultiEventPanel.IsMultiEventName(System.String)","summary":"\r\n            Check if the multi event record page has the provided name.\r\n            ","param":{"_":"The multi event name value to check for.","name":"name"},"returns":"True if the multi event has the provided name, false otherwise."},{"name":"M:Blueshirt.Core.Crm.MultiEventPanel.IsHierarchy(TechTalk.SpecFlow.Table)","summary":"\r\n            Check if the multi-event has the provided event hierarchy.\r\n            ","param":{"_":"The hierarchy to validate.  A column 'event' should exist for the event\r\n            name with a column 'parent' mapping the expected parent of the event.  If no value is provided in the 'parent' column,\r\n            it is assumed that this is the root event.","name":"hierarchy"},"returns":"True if the multi-event has the provided hierarchy, false otherwise."},{"name":"M:Blueshirt.Core.Crm.MultiEventPanel.IsRootEvent(System.String)","summary":"\r\n            Check if the provided event name is displayed as the root event for the Multi-Event page\r\n            "},{"name":"M:Blueshirt.Core.Crm.MultiEventPanel.IsChildOfParent(System.String,System.String)","summary":"\r\n            Check if the provided event is listed as a child of the expected parent event.\r\n            "},{"name":"T:Blueshirt.Core.Crm.PackagesPanel","summary":"\r\n            Class to handle interactions for the 'Packages' panel.\r\n            "},{"name":"F:Blueshirt.Core.Crm.PackagesPanel.packagesColumnCaptionToIndex","summary":"\r\n            Static mapping of the column captions to their DOM index for the 'Packages' datalist.\r\n            "},{"name":"M:Blueshirt.Core.Crm.PackagesPanel.DeletePackage(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Delete a package.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"package"}},{"name":"M:Blueshirt.Core.Crm.PackagesPanel.DeletePackage(System.Collections.Generic.IDictionary{System.String,System.String})","summary":"\r\n            Delete a package.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"package"}},{"name":"M:Blueshirt.Core.Crm.PackagesPanel.AddMailPackage","summary":"\r\n            Start to add a mail package.\r\n            "},{"name":"M:Blueshirt.Core.Crm.PackagesPanel.PackageExists(System.Collections.Generic.IDictionary{System.String,System.String})","summary":"\r\n            Check if a package exists.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"package"},"returns":"True if the package exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.PackagesPanel.PackageExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a package exists.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"package"},"returns":"True if the package exists, false otherwise"},{"name":"T:Blueshirt.Core.Crm.PlanPanel","summary":"\r\n            Class to handle interactions for the 'Plan' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.PlanPanel.AddCompletedStep(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Add a completed step to the plan.\r\n            ","param":{"_":"Mapping of the field captions for adding a step to their desired values.","name":"step"}},{"name":"M:Blueshirt.Core.Crm.PlanPanel.CompletedStepExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a completed step exists.\r\n            ","param":{"_":"Mapping of the column captions for the 'Completed steps' section to a single row's values.","name":"step"},"returns":"True if the step exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.PlanPanel.PlannedStepExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a planned step exists.\r\n            ","param":{"_":"Mapping of the column captions for the 'Planned and pending steps' section to a single row's values.","name":"step"},"returns":"True if the step exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.PlanPanel.EditSteps","summary":"\r\n            Click the 'Edit steps' button for the 'Planned and pending steps' section.\r\n            "},{"name":"T:Blueshirt.Core.Crm.PledgePanel","summary":"\r\n            Class to handle interactions for the 'Pledge' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.PledgePanel.IsPledgeConstituent(System.String)","summary":"\r\n            Check if the pledge is associated with the provided constituent.\r\n            Verifies by checking which constituent the header link navigates to.\r\n            ","param":{"_":"The last name of the constituent.","name":"constituent"},"returns":"True if the pledge is associated with the provided constituent, false otherwise."},{"name":"M:Blueshirt.Core.Crm.PledgePanel.IsPledgeAmount(System.String)","summary":"\r\n            Check if the pledge is for the provided amount.\r\n            ","param":{"_":"The amount to check for.","name":"amount"},"returns":"True if the pledge is for the provided amount, false otherwise."},{"name":"M:Blueshirt.Core.Crm.PledgePanel.IsPledgeSubtype(System.String)","summary":"\r\n            Check if the pledge has the provided subtype.\r\n            ","param":{"_":"The subtype to check for.","name":"subtype"},"returns":"True if the pledge has the subtype, false otherwise."},{"name":"M:Blueshirt.Core.Crm.PledgePanel.DesignationExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a designation exists.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"designation"},"returns":"True if the designation exists, false otherwise."},{"name":"T:Blueshirt.Core.Crm.PledgeSubtypePanel","summary":"\r\n            Class to handle interactions for the 'Pledge Subtype' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.PledgeSubtypePanel.AddSubtype(System.String,System.Boolean)","summary":"\r\n            Add a pledge subtype.\r\n            ","param":[{"_":"The name of the subtype.","name":"name"},{"_":"Boolean indicating whether the 'Post to GL' checkbox should bet set or not.","name":"postToGL"}]},{"name":"M:Blueshirt.Core.Crm.PledgeSubtypePanel.AddSubtype(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Add a pledge subtype.\r\n            ","param":{"_":"Mapping of the 'Add a pledge subtype' field captions to their values.","name":"subtype"}},{"name":"M:Blueshirt.Core.Crm.PledgeSubtypePanel.SubtypeExists(System.String)","summary":"\r\n            Check if a subtype exists.\r\n            ","param":{"_":"The name of the subtype/","name":"name"},"returns":"True if the subtype exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.PledgeSubtypePanel.SubtypeExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a subtype exists.\r\n            ","param":{"_":"Mapping of column captions to a single row's values.","name":"subtype"},"returns":"True if the subtype exists, false otherwise."},{"name":"T:Blueshirt.Core.Crm.Panels.QueryPanel","summary":"\r\n            Class to handle interactions for the 'Query' panel.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Panels.QueryPanel.getXAddButton","summary":"\r\n            Returns an Xpath for the Add button on a QueryPanel.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Panels.QueryPanel.getXAdhocQuery","summary":"\r\n            Returns an Xpath for the Adhoc Query menu item on a QueryPanel.\r\n            "},{"name":"F:Blueshirt.Core.Crm.Panels.QueryPanel.getXFilterQueryField","summary":"\r\n            Returns an Xpath for the Query Filter field on a QueryPanel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.Panels.QueryPanel.getXDeleteQuery(System.String)","summary":"\r\n            Returns an XPath for the Delete Query menu item on a QueryPanel.  \r\n            \r\n            ","param":{"_":"The text of the Query to delete","name":"text"},"returns":""},{"name":"M:Blueshirt.Core.Crm.Panels.QueryPanel.getXQuery(System.String)","summary":"\r\n            Returns an Xpath for a Query in a results row on a QueryPanel.\r\n            \r\n            ","param":{"_":"The text of the Query.","name":"text"},"returns":""},{"name":"M:Blueshirt.Core.BBIS.BBISHomePage.Logon","summary":"\r\n            Logon with the credentials specified in the config file.\r\n            "},{"name":"T:Blueshirt.Core.Crm.BBCRMHomePage","summary":"\r\n            A class for handling interactions and actions on the main BBCRM page.\r\n            \r\n            "},{"name":"F:Blueshirt.Core.Crm.BBCRMHomePage.getXMenuMore","summary":"\r\n            Returns an Xpath for the more button icon on the toolbar.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BBCRMHomePage.getXTask(System.String)","summary":"\r\n            Format an xPath to find a task in the left explorer bar.\r\n            ","param":{"_":"The caption of the task.","name":"caption"}},{"name":"M:Blueshirt.Core.Crm.BBCRMHomePage.getXExtTab(System.String)","summary":"\r\n            Returns an Xpath that will match a Tab either on the main tool bar or the expanded one.\r\n            \r\n            Any Functional Area link can be in two places; the main 'Tabs' menu and in the expanded menu. \r\n            This Xpath matches both elements.\r\n            It relies on only one side matching at a time, which is true for this method but might not be for all possible permutaions\r\n            of GUI manipulation, particularly changing window size. So the uniqueness of this Xpath depends on the sequence of GUI actions\r\n            that lead up to its use.\r\n            ","param":{"_":"The caption of the tab.","name":"caption"}},{"name":"F:Blueshirt.Core.Crm.BBCRMHomePage.getXWaitBar","summary":"\r\n            Returns an Xpath for the WaitBar\r\n            "},{"name":"M:Blueshirt.Core.Crm.BBCRMHomePage.OpenConstituentsFA","summary":"\r\n            Navigate to the 'Constituents' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BBCRMHomePage.OpenFundraisingFA","summary":"\r\n            Navigate to the 'Fundraising' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BBCRMHomePage.OpenRevenueFA","summary":"\r\n            Navigate to the 'Revenue' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BBCRMHomePage.OpenEventsFA","summary":"\r\n            Navigate to the 'Events' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BBCRMHomePage.OpenProspectsFA","summary":"\r\n            Navigate to the 'Prospects' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BBCRMHomePage.OpenAnalysisFA","summary":"\r\n            Navigate to the 'Analysis' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BBCRMHomePage.OpenMembershipsFA","summary":"\r\n            Navigate to the 'Memberships' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BBCRMHomePage.OpenMarketingAndCommunicationsFA","summary":"\r\n            Navigate to the 'Marketing and Communications' functional area.\r\n            "},{"name":"M:Blueshirt.Core.Crm.BBCRMHomePage.OpenFunctionalArea(System.String,System.String)","summary":"\r\n            Open a Functional Area by caption and wait for its header image to load.\r\n            ","param":[{"_":"The caption(name) of the Functional Area to open.","name":"caption"},{"_":"All or part of the image name that the desired functional area displays in the header.","name":"imageName"}]},{"name":"M:Blueshirt.Core.Crm.BBCRMHomePage.OpenFunctionalArea(System.String)","summary":"\r\n            Open a Functional Area by caption.\r\n            ","param":{"_":"The caption(name) of the Functional Area to open.","name":"caption"}},{"name":"M:Blueshirt.Core.Crm.BBCRMHomePage.Logon","summary":"\r\n            Logon with the credentials specified in the config file.\r\n            "},{"name":"T:Blueshirt.Core.Crm.ReceiptsPanel","summary":"\r\n            Class to handle interactions for the 'Receipts' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.ReceiptsPanel.AddReceipt(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Add a receipt process.\r\n            ","param":{"_":"Mapping of the field captions to their desired values.","name":"receipt"}},{"name":"M:Blueshirt.Core.Crm.ReceiptsPanel.RunReceiptProcess(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Select a receipt process and start it.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"receiptProcess"}},{"name":"T:Blueshirt.Core.Crm.RecurringGiftPanel","summary":"\r\n            Class to handle interactions for the 'Recurring Gift' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.RecurringGiftPanel.DesignationExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a designation exists for the recurring gift.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"designation"},"returns":"True if the designation exists, false otherwise."},{"name":"T:Blueshirt.Core.Crm.RegistrantPanel","summary":"\r\n            Class to handle interactions for the 'Event Registrant' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.RegistrantPanel.IsRegistrant(System.String)","summary":"\r\n            Check the name of the registrant on the panel.\r\n            ","param":{"_":"The name of the registrant to check for.","name":"registrant"},"returns":"True if the provided name is the name of the registrant."},{"name":"M:Blueshirt.Core.Crm.RegistrantPanel.IsEvent(System.String)","summary":"\r\n            Check the name of the event the registrant is registered for.\r\n            ","param":{"_":"The name of the even to check for.","name":"eventName"},"returns":"True if the provided name is the name of the associated event."},{"name":"M:Blueshirt.Core.Crm.RegistrantPanel.IsNumGuests(System.Int32)","summary":"\r\n            Check the number of listed guests for the registrant.\r\n            ","param":{"_":"The number of guests to check for.","name":"numGuests"},"returns":"True if the provided number is the listed number of guests."},{"name":"T:Blueshirt.Core.Crm.RevenueRecordPanel","summary":"\r\n            Class to handle interactions for the 'Revenue Record' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.RevenueRecordPanel.IsSubtype(System.String)","summary":"\r\n            Check the subtype of the revenue record.\r\n            ","param":{"_":"The subtype to check for.","name":"subtype"},"returns":"True if the subtype is the expected value, false otherwise."},{"name":"M:Blueshirt.Core.Crm.RevenueRecordPanel.PaymentExists(TechTalk.SpecFlow.TableRow)","summary":"\r\n            Check if a payment exists on the revenue record.\r\n            ","param":{"_":"Mapping of the donation view form's captions (minus the colon) to a single donation's values.","name":"donation"},"returns":"True if the donation exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.RevenueRecordPanel.IsReceipted","summary":"\r\n            Check if a payment is marked as 'Receipted'\r\n            ","returns":"True if the payment is 'Receipted', false otherwise."},{"name":"M:Blueshirt.Core.Crm.RevenueRecordPanel.IsAcknowledged","summary":"\r\n            Check if a payment is marked as 'Acknowledged'\r\n            ","returns":"True if the payment is 'Acknowledged', false otherwise."},{"name":"T:Blueshirt.Core.Crm.SegmentPanel","summary":"\r\n            Class to handle interactions for the 'Segment' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.SegmentPanel.ActivatedMarketingEffortExists(System.Collections.Generic.IDictionary{System.String,System.String})","summary":"\r\n            Check if an activated marketing effort exists.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"effort"},"returns":"True if the effort exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.SegmentPanel.DeleteActivatedMarketingEffort(System.String)","summary":"\r\n            Delete an activated marketing effort using the specified template.\r\n            ","param":{"_":"The name of the template that the effort uses.","name":"marketingTemplate"}},{"name":"M:Blueshirt.Core.Crm.SegmentPanel.DeleteSegment","summary":"\r\n            Delete the current segment.\r\n            "},{"name":"T:Blueshirt.Core.Crm.SegmentsPanel","summary":"\r\n            Class to handle interactions for the 'Segments' panel.\r\n            "},{"name":"M:Blueshirt.Core.Crm.SegmentsPanel.AddSegment(System.String)","summary":"\r\n            Start to add a segment of the specified type.\r\n            ","param":{"_":"The type of segment to add.  Corresponds to the caption of Add menu items.","name":"segmentType"}},{"name":"M:Blueshirt.Core.Crm.SegmentsPanel.DeleteSegment(System.Collections.Generic.IDictionary{System.String,System.String})","summary":"\r\n            Delete a segment.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"segment"}},{"name":"M:Blueshirt.Core.Crm.SegmentsPanel.SegmentExists(System.Collections.Generic.IDictionary{System.String,System.String})","summary":"\r\n            Check if a segment exists.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"segment"},"returns":"True if the segment exists, false otherwise."},{"name":"M:Blueshirt.Core.Crm.SegmentsPanel.GoToSegment(System.Collections.Generic.IDictionary{System.String,System.String})","summary":"\r\n            Navigate to the segment panel of a specified segment.\r\n            ","param":{"_":"Mapping of the column captions to a single row's values.","name":"segment"}}]}}}